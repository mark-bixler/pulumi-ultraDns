{
    "name": "ultradns",
    "displayName": "UltraDNS",
    "description": "A Pulumi package for creating and managing ultradns cloud resources.",
    "keywords": [
        "pulumi",
        "ultradns",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ultradns` Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns).",
    "repository": "https://github.com/mark-bixler/pulumi-ultradns",
    "pluginDownloadURL": "https://github.com/org/mark-bixler/pulumi-ultradns/releases/download/v${VERSION}",
    "publisher": "mark-bixler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "mark-bixler"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing ultradns cloud resources.",
            "packageName": "@mark-bixler/ultradns",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ultradns` repo](https://github.com/mark-bixler/pulumi-ultradns/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ultradns` repo](https://github.com/ultradns/terraform-provider-ultradns/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "mark-bixler_ultradns",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ultradns` repo](https://github.com/mark-bixler/pulumi-ultradns/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ultradns` repo](https://github.com/ultradns/terraform-provider-ultradns/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        }
    },
    "provider": {
        "description": "The provider type for the ultradns package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        },
        "inputProperties": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        }
    },
    "resources": {
        "ultradns:index/record:Record": {
            "description": "Use this resource to manage standard DNS records in UltraDNS\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create DNS record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst record = new ultradns.Record(\"a\", {\n    ownerName: \"a\",\n    recordDatas: [\"192.168.1.1\"],\n    recordType: \"1\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nrecord = ultradns.Record(\"record\",\n    owner_name=\"a\",\n    record_datas=[\"192.168.1.1\"],\n    record_type=\"1\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var record = new Ultradns.Record(\"record\", new()\n    {\n        OwnerName = \"a\",\n        RecordDatas = new[]\n        {\n            \"192.168.1.1\",\n        },\n        RecordType = \"1\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"record\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"a\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"1\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var record = new Record(\"record\", RecordArgs.builder()        \n            .ownerName(\"a\")\n            .recordDatas(\"192.168.1.1\")\n            .recordType(\"1\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  record:\n    type: ultradns:Record\n    properties:\n      ownerName: a\n      recordDatas:\n        - 192.168.1.1\n      recordType: 1\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type NS (2)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst ns = new ultradns.Record(\"ns\", {\n    ownerName: \"example.com.\",\n    recordDatas: [\n        \"ns11.sample.com.\",\n        \"ns12.sample.com.\",\n    ],\n    recordType: \"NS\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nns = ultradns.Record(\"ns\",\n    owner_name=\"example.com.\",\n    record_datas=[\n        \"ns11.sample.com.\",\n        \"ns12.sample.com.\",\n    ],\n    record_type=\"NS\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ns = new Ultradns.Record(\"ns\", new()\n    {\n        OwnerName = \"example.com.\",\n        RecordDatas = new[]\n        {\n            \"ns11.sample.com.\",\n            \"ns12.sample.com.\",\n        },\n        RecordType = \"NS\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"ns\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"example.com.\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ns11.sample.com.\"),\n\t\t\t\tpulumi.String(\"ns12.sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"NS\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ns = new Record(\"ns\", RecordArgs.builder()        \n            .ownerName(\"example.com.\")\n            .recordDatas(            \n                \"ns11.sample.com.\",\n                \"ns12.sample.com.\")\n            .recordType(\"NS\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ns:\n    type: ultradns:Record\n    properties:\n      ownerName: example.com.\n      recordDatas:\n        - ns11.sample.com.\n        - ns12.sample.com.\n      recordType: NS\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type CNAME (5)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst cname = new ultradns.Record(\"cname\", {\n    ownerName: \"cname\",\n    recordDatas: [\"host.sample.com.\"],\n    recordType: \"CNAME\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ncname = ultradns.Record(\"cname\",\n    owner_name=\"cname\",\n    record_datas=[\"host.sample.com.\"],\n    record_type=\"CNAME\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cname = new Ultradns.Record(\"cname\", new()\n    {\n        OwnerName = \"cname\",\n        RecordDatas = new[]\n        {\n            \"host.sample.com.\",\n        },\n        RecordType = \"CNAME\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"cname\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"cname\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"host.sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cname = new Record(\"cname\", RecordArgs.builder()        \n            .ownerName(\"cname\")\n            .recordDatas(\"host.sample.com.\")\n            .recordType(\"CNAME\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cname:\n    type: ultradns:Record\n    properties:\n      ownerName: cname\n      recordDatas:\n        - host.sample.com.\n      recordType: CNAME\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type PTR (12)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst ptr = new ultradns.Record(\"ptr\", {\n    ownerName: \"1\",\n    recordDatas: [\"ns1.example.com.\"],\n    recordType: \"12\",\n    ttl: 120,\n    zoneName: \"70.154.156.in-addr.arpa.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nptr = ultradns.Record(\"ptr\",\n    owner_name=\"1\",\n    record_datas=[\"ns1.example.com.\"],\n    record_type=\"12\",\n    ttl=120,\n    zone_name=\"70.154.156.in-addr.arpa.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ptr = new Ultradns.Record(\"ptr\", new()\n    {\n        OwnerName = \"1\",\n        RecordDatas = new[]\n        {\n            \"ns1.example.com.\",\n        },\n        RecordType = \"12\",\n        Ttl = 120,\n        ZoneName = \"70.154.156.in-addr.arpa.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"ptr\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"1\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ns1.example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"12\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"70.154.156.in-addr.arpa.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ptr = new Record(\"ptr\", RecordArgs.builder()        \n            .ownerName(\"1\")\n            .recordDatas(\"ns1.example.com.\")\n            .recordType(\"12\")\n            .ttl(120)\n            .zoneName(\"70.154.156.in-addr.arpa.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ptr:\n    type: ultradns:Record\n    properties:\n      ownerName: 1\n      recordDatas:\n        - ns1.example.com.\n      recordType: 12\n      ttl: 120\n      zoneName: 70.154.156.in-addr.arpa.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type MX (15)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst mx = new ultradns.Record(\"mx\", {\n    ownerName: \"mx\",\n    recordDatas: [\"2 example.com.\"],\n    recordType: \"15\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nmx = ultradns.Record(\"mx\",\n    owner_name=\"mx\",\n    record_datas=[\"2 example.com.\"],\n    record_type=\"15\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mx = new Ultradns.Record(\"mx\", new()\n    {\n        OwnerName = \"mx\",\n        RecordDatas = new[]\n        {\n            \"2 example.com.\",\n        },\n        RecordType = \"15\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"mx\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"mx\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2 example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"15\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mx = new Record(\"mx\", RecordArgs.builder()        \n            .ownerName(\"mx\")\n            .recordDatas(\"2 example.com.\")\n            .recordType(\"15\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mx:\n    type: ultradns:Record\n    properties:\n      ownerName: mx\n      recordDatas:\n        - 2 example.com.\n      recordType: 15\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type TXT (16)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst txt = new ultradns.Record(\"txt\", {\n    ownerName: \"txt\",\n    recordDatas: [\"text data\"],\n    recordType: \"TXT\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ntxt = ultradns.Record(\"txt\",\n    owner_name=\"txt\",\n    record_datas=[\"text data\"],\n    record_type=\"TXT\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var txt = new Ultradns.Record(\"txt\", new()\n    {\n        OwnerName = \"txt\",\n        RecordDatas = new[]\n        {\n            \"text data\",\n        },\n        RecordType = \"TXT\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"txt\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"txt\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"text data\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"TXT\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var txt = new Record(\"txt\", RecordArgs.builder()        \n            .ownerName(\"txt\")\n            .recordDatas(\"text data\")\n            .recordType(\"TXT\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  txt:\n    type: ultradns:Record\n    properties:\n      ownerName: txt\n      recordDatas:\n        - text data\n      recordType: TXT\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.Record(\"aaaa\", {\n    ownerName: \"aaaa\",\n    recordDatas: [\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    recordType: \"AAAA\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.Record(\"aaaa\",\n    owner_name=\"aaaa\",\n    record_datas=[\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    record_type=\"AAAA\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.Record(\"aaaa\", new()\n    {\n        OwnerName = \"aaaa\",\n        RecordDatas = new[]\n        {\n            \"2001:db8:85a3:0:0:8a2e:370:7334\",\n        },\n        RecordType = \"AAAA\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"aaaa\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"aaaa\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7334\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"AAAA\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new Record(\"aaaa\", RecordArgs.builder()        \n            .ownerName(\"aaaa\")\n            .recordDatas(\"2001:db8:85a3:0:0:8a2e:370:7334\")\n            .recordType(\"AAAA\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:Record\n    properties:\n      ownerName: aaaa\n      recordDatas:\n        - 2001:db8:85a3:0:0:8a2e:370:7334\n      recordType: AAAA\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type SRV (33)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst srv = new ultradns.Record(\"srv\", {\n    ownerName: \"srv\",\n    recordDatas: [\"5 6 7 example.com.\"],\n    recordType: \"33\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsrv = ultradns.Record(\"srv\",\n    owner_name=\"srv\",\n    record_datas=[\"5 6 7 example.com.\"],\n    record_type=\"33\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var srv = new Ultradns.Record(\"srv\", new()\n    {\n        OwnerName = \"srv\",\n        RecordDatas = new[]\n        {\n            \"5 6 7 example.com.\",\n        },\n        RecordType = \"33\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"srv\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"srv\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5 6 7 example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"33\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var srv = new Record(\"srv\", RecordArgs.builder()        \n            .ownerName(\"srv\")\n            .recordDatas(\"5 6 7 example.com.\")\n            .recordType(\"33\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  srv:\n    type: ultradns:Record\n    properties:\n      ownerName: srv\n      recordDatas:\n        - 5 6 7 example.com.\n      recordType: 33\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type SSHFP (44)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sshfp = new ultradns.Record(\"sshfp\", {\n    ownerName: \"sshfp\",\n    recordDatas: [\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"],\n    recordType: \"SSHFP\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsshfp = ultradns.Record(\"sshfp\",\n    owner_name=\"sshfp\",\n    record_datas=[\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"],\n    record_type=\"SSHFP\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshfp = new Ultradns.Record(\"sshfp\", new()\n    {\n        OwnerName = \"sshfp\",\n        RecordDatas = new[]\n        {\n            \"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\",\n        },\n        RecordType = \"SSHFP\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"sshfp\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"sshfp\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"SSHFP\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sshfp = new Record(\"sshfp\", RecordArgs.builder()        \n            .ownerName(\"sshfp\")\n            .recordDatas(\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\")\n            .recordType(\"SSHFP\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sshfp:\n    type: ultradns:Record\n    properties:\n      ownerName: sshfp\n      recordDatas:\n        - 1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\n      recordType: SSHFP\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type APEXALIAS (65282)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst apex = new ultradns.Record(\"apex\", {\n    ownerName: \"example.com.\",\n    recordDatas: [\"sample.com.\"],\n    recordType: \"APEXALIAS\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\napex = ultradns.Record(\"apex\",\n    owner_name=\"example.com.\",\n    record_datas=[\"sample.com.\"],\n    record_type=\"APEXALIAS\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apex = new Ultradns.Record(\"apex\", new()\n    {\n        OwnerName = \"example.com.\",\n        RecordDatas = new[]\n        {\n            \"sample.com.\",\n        },\n        RecordType = \"APEXALIAS\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"apex\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"example.com.\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"APEXALIAS\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apex = new Record(\"apex\", RecordArgs.builder()        \n            .ownerName(\"example.com.\")\n            .recordDatas(\"sample.com.\")\n            .recordType(\"APEXALIAS\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  apex:\n    type: ultradns:Record\n    properties:\n      ownerName: example.com.\n      recordDatas:\n        - sample.com.\n      recordType: APEXALIAS\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRecords can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type as well as the corresponding number as shown in the example below. Example\n\n```sh\n $ pulumi import ultradns:index/record:Record example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "inputProperties": {
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Record resources.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    }
}