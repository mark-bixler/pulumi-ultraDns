{
    "name": "ultradns",
    "displayName": "UltraDNS",
    "description": "A Pulumi package for creating and managing ultradns cloud resources.",
    "keywords": [
        "pulumi",
        "ultradns",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ultradns` Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns).",
    "repository": "https://github.com/mark-bixler/pulumi-ultradns",
    "pluginDownloadURL": "https://github.com/org/mark-bixler/pulumi-ultradns/releases/download/v${VERSION}",
    "publisher": "mark-bixler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "mark-bixler"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing ultradns cloud resources.",
            "packageName": "@mark-bixler/ultradns",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ultradns` repo](https://github.com/mark-bixler/pulumi-ultradns/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ultradns` repo](https://github.com/ultradns/terraform-provider-ultradns/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "mark-bixler_ultradns",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ultradns/terraform-provider-ultradns)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ultradns` repo](https://github.com/mark-bixler/pulumi-ultradns/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ultradns` repo](https://github.com/ultradns/terraform-provider-ultradns/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        }
    },
    "types": {
        "ultradns:index/DirPoolNoResponse:DirPoolNoResponse": {
            "properties": {
                "allNonConfigured": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not “no response” is returned for all of the non-configured geographical territories and IP ranges. This can only be set to `true` if there is no entry for rdataInfo, with allNonConfigured is set to `true`. If this is set to true, then geoInfo (`geo_group_name` and `geo_codes` ) and ipInfo (`ip_group_name` and `ip`) are ignored. Default value set to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The codes for the geographical territories that make up the “no response” group. Valid GEO codes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoGroupName": {
                    "type": "string",
                    "description": "(String) The name for the “no response” GeoIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipGroupName": {
                    "type": "string",
                    "description": "(String) The name of the “no response” SourceIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/DirPoolNoResponseIp:DirPoolNoResponseIp"
                    },
                    "description": "(Block Set) List of nested blocks describing the IP addresses and IP range for the “no response” SourceIP group. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/DirPoolNoResponseIp:DirPoolNoResponseIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "(String) A single IPv4 or IPv6 address. If `address` is present, the `start`, `end`, and `CIDR` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "description": "(String) The CIDR format (IPv4 or IPv6) for an IP address range. If `cidr` is present, the `start`, `end`, and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "end": {
                    "type": "string",
                    "description": "(String) The ending IP address (IPv4 or IPv6). If the end value is present, the start value must be present as well. `cidr` and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "(String) The starting IP address (IPv4 or IPv6). If the start value is present, the end value must be present as well. `Cidr` and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/DirPoolRdataInfo:DirPoolRdataInfo": {
            "properties": {
                "allNonConfigured": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not the associated rdata is used for all of the non-configured geographical territories and SourceIP ranges. At most, one entry in rdataInfo can have this set to true. If this is set to true, then geoInfo (`geo_group_name` and `geo_codes` ) and ipInfo (`ip_group_name` and `ip`) are ignored. Default value set to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The codes for the geographical territories that make up this group. Valid GEO codes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoGroupName": {
                    "type": "string",
                    "description": "(String) The name of the GeoIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipGroupName": {
                    "type": "string",
                    "description": "(String) The name of the SourceIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/DirPoolRdataInfoIp:DirPoolRdataInfoIp"
                    },
                    "description": "(Block Set) List of nested blocks describing the IP addresses and IP ranges this SourceIP group contains. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) The IPv4/IPv6 address, CNAME, MX, TXT, or SRV format data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(String) The type for the specified pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "rdata",
                        "type"
                    ]
                }
            }
        },
        "ultradns:index/DirPoolRdataInfoIp:DirPoolRdataInfoIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "(String) A single IPv4 or IPv6 address. If `address` is present, the `start`, `end`, and `CIDR` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "description": "(String) The CIDR format (IPv4 or IPv6) for an IP address range. If `cidr` is present, the `start`, `end`, and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "end": {
                    "type": "string",
                    "description": "(String) The ending IP address (IPv4 or IPv6). If the end value is present, the start value must be present as well. `cidr` and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "(String) The starting IP address (IPv4 or IPv6). If the start value is present, the end value must be present as well. `Cidr` and `address` cannot be present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/SbPoolBackupRecord:SbPoolBackupRecord": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether the pool's backup record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Integer) Specifies the time, between 0 – 30 minutes, that SiteBacker waits after detecting that the pool record has failed, prior to activating the primary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) The IPv4 address or CNAME for the backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availableToServe",
                        "rdata"
                    ]
                }
            }
        },
        "ultradns:index/SbPoolRdataInfo:SbPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Integer) Specifies the time, between 0 – 30 minutes, that SiteBacker waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "(Integer) Indicates the serving preference for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not probes are run for this pool record. Default value set to true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "(String) The current state of the pool record. Valid values are `NORMAL`, `ACTIVE`, and `INACTIVE`. Default value set to `NORMAL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "integer",
                    "description": "(Integer) Specifies how many probes must agree before the record state is changed. Default value set to 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availableToServe",
                        "priority",
                        "rdata"
                    ]
                }
            }
        },
        "ultradns:index/SfPoolBackupRecord:SfPoolBackupRecord": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) An optional description for the backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) An IPv4 address or IPv6 address as a backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ]
        },
        "ultradns:index/SfPoolMonitor:SfPoolMonitor": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "(String) HTTP method used to connect to the monitored URL. Valid values are `GET`, `POST`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchString": {
                    "type": "string",
                    "description": "(String) A string that is checked against the returned data from the request. The monitor fails if the searchString is not present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transmittedData": {
                    "type": "string",
                    "description": "(String) If a monitor is sending a POST, this is the data sent as the body of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "(String) Monitored URL. A full URL including the protocol, host, and URI. Valid protocols are HTTP and HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ]
        },
        "ultradns:index/SlbPoolAllFailRecord:SlbPoolAllFailRecord": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) An optional description for the backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) An IPv4 or IPv6 address as a backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serving": {
                    "type": "boolean",
                    "description": "(Boolean) Serving status of the AllFail Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "rdata",
                        "serving"
                    ]
                }
            }
        },
        "ultradns:index/SlbPoolMonitor:SlbPoolMonitor": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "(String) HTTP method used to connect to the monitored URL. Valid values are `GET`, and `POST`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchString": {
                    "type": "string",
                    "description": "(String) A string that is checked against the returned data from the request. The monitor fails if the search string is not present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transmittedData": {
                    "type": "string",
                    "description": "(String) If a monitor is sending a POST, this is the data sent as the body of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "(String) Monitored URL. A full URL including the protocol, host, and URI. Valid protocols are HTTP and HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ]
        },
        "ultradns:index/SlbPoolRdataInfo:SlbPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether the record is available to be served (true) or not (false), based upon the probe results or the forced state of the record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(String) An optional description of the record in the live pool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcedState": {
                    "type": "string",
                    "description": "(String) The Forced State of the record that indicates whether the record needs to be: force served, forced to be inactive, or the force status not being considered (monitoring result decides the record state). Valid values are `FORCED_ACTIVE`, `FORCED_INACTIVE`, or `NOT_FORCED`. Default value set to `NOT_FORCED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "probingEnabled": {
                    "type": "boolean",
                    "description": "(Boolean) Can be set at the record level to indicate whether probing is required (true) or not (false) for the given record. Default value set to true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) An IPv4 address or IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availableToServe",
                        "rdata"
                    ]
                }
            }
        },
        "ultradns:index/TcPoolBackupRecord:TcPoolBackupRecord": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether the pool's backup record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Integer) Specifies the time, between 0 – 30 minutes, that the Traffic Controller waits after detecting that the pool record has failed, prior to activating the primary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) The IPv4 address or CNAME for the backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availableToServe",
                        "rdata"
                    ]
                }
            }
        },
        "ultradns:index/TcPoolRdataInfo:TcPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Integer) Specifies the time, between 0 – 30 minutes, that the Traffic Controller waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "(Integer) Indicates the serving preference for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not probes are run for this pool record. Default value set to true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "(String) The current state of the pool record. Valid values are `NORMAL`, `ACTIVE`, and `INACTIVE`. Default value set to `NORMAL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "integer",
                    "description": "(Integer) Specifies how many probes must agree before the record state is changed. Default value set to 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "(Integer) Determines the traffic load to send to each server in the Traffic Controller pool. Even integers from 2 to 100. Default value set to 2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availableToServe",
                        "priority",
                        "rdata"
                    ]
                }
            }
        },
        "ultradns:index/ZoneAliasCreateInfo:ZoneAliasCreateInfo": {
            "properties": {
                "originalZoneName": {
                    "type": "string",
                    "description": "(String) The name of the zone being aliased. The existing zone must be owned by the same account as the new zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "originalZoneName"
            ]
        },
        "ultradns:index/ZonePrimaryCreateInfo:ZonePrimaryCreateInfo": {
            "properties": {
                "createType": {
                    "type": "string",
                    "description": "(String) Indicates the method for creating the primary zone. Valid values are `NEW`, `COPY`, `TRANSFER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceImport": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not to move existing records from zones into this new zone. Default value set to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inherit": {
                    "type": "string",
                    "description": "(String) Defines whether this zone should inherit the zone transfer values from the Account, and also specifies which values to inherit. Valid values are `ALL`, `NONE`, any combination of `IP_RANGE`, `NOTIFY_IP`, `TSIG`. Separate multiple values with a comma.\u003cbr/\u003e\nExample: `IP_RANGE, NOTIFY_IP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameServer": {
                    "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfoNameServer:ZonePrimaryCreateInfoNameServer",
                    "description": "(Block Set, Max: 1) Nested block describing the Primary zone's name server. It needs to be provided if `create_type` is `TRANSFER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfoNotifyAddress:ZonePrimaryCreateInfoNotifyAddress"
                    },
                    "description": "(Block Set) Nested block describing the addresses that are notified when updates are made to the primary zone. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originalZoneName": {
                    "type": "string",
                    "description": "(String) The name of the zone being copied. The existing zone must be owned by the same account as the new zone. It needs to be provided if `create_type` is `COPY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restrictIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfoRestrictIp:ZonePrimaryCreateInfoRestrictIp"
                    },
                    "description": "(Block Set) Nested block describing the list of IPv4 or IPv6 ranges that are allowed to transfer primary zones out using zone transfer protocol (AXFR/IXFR). The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsig": {
                    "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfoTsig:ZonePrimaryCreateInfoTsig",
                    "description": "(Block Set, Max: 1) Nested block describing the TSIG information for the primary zone. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createType",
                        "inherit"
                    ]
                }
            }
        },
        "ultradns:index/ZonePrimaryCreateInfoNameServer:ZonePrimaryCreateInfoNameServer": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the TSIG key’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "ultradns:index/ZonePrimaryCreateInfoNotifyAddress:ZonePrimaryCreateInfoNotifyAddress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) A description of this IP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyAddress": {
                    "type": "string",
                    "description": "(String) The IPv4 Address that is notified when the primary zone is updated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifyAddress"
            ]
        },
        "ultradns:index/ZonePrimaryCreateInfoRestrictIp:ZonePrimaryCreateInfoRestrictIp": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "(String) The IP Address ranges specified in CIDR.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comment": {
                    "type": "string",
                    "description": "(String) A description of this range of IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endIp": {
                    "type": "string",
                    "description": "(String) The end of the IPv4 or IPv6 range that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleIp": {
                    "type": "string",
                    "description": "(String) The IPv4 or IPv6 address that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startIp": {
                    "type": "string",
                    "description": "(String) The start of the IPv4 or IPv6 range that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/ZonePrimaryCreateInfoTsig:ZonePrimaryCreateInfoTsig": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) A description of this key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyName": {
                    "type": "string",
                    "description": "(String) The name of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(String) The value of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tsigAlgorithm",
                "tsigKeyName",
                "tsigKeyValue"
            ]
        },
        "ultradns:index/ZoneRegistrarInfo:ZoneRegistrarInfo": {
            "properties": {
                "nameServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/ZoneRegistrarInfoNameServer:ZoneRegistrarInfoNameServer"
                    },
                    "description": "(Computed) (Block Set)  Nested block describing the name servers configuration of the zone. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registrar": {
                    "type": "string",
                    "description": "(Computed) (String) The name of the domain registrar.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "whoIsExpiration": {
                    "type": "string",
                    "description": "(Computed) (String) The date  (`yyyy-MM-dd HH:mm:ss.S`) when the domain name registration expires.\u003cbr/\u003e\nExample: `2022-08-17 03:59:59.0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nameServers",
                        "registrar",
                        "whoIsExpiration"
                    ]
                }
            }
        },
        "ultradns:index/ZoneRegistrarInfoNameServer:ZoneRegistrarInfoNameServer": {
            "properties": {
                "incorrects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of any obsolete UltraDNS name servers that are still configured for this zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "missings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of UltraDNS name servers that should be configured for this domain, but are not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of UltraDNS name servers that are configured for this domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unknowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of name servers that are configured for this domain, but are not UltraDNS managed name servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incorrects",
                        "missings",
                        "oks",
                        "unknowns"
                    ]
                }
            }
        },
        "ultradns:index/ZoneSecondaryCreateInfo:ZoneSecondaryCreateInfo": {
            "properties": {
                "notificationEmailAddress": {
                    "type": "string",
                    "description": "(String) The Notification Email for a secondary zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryNameServer1": {
                    "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer1:ZoneSecondaryCreateInfoPrimaryNameServer1",
                    "description": "(Block Set) The structure of this block follows the same structure as the `name_server` block described above. It is the info of primary name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryNameServer2": {
                    "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer2:ZoneSecondaryCreateInfoPrimaryNameServer2",
                    "description": "(Block Set) The structure of this block follows the same structure as the `name_server` block described above. It is the info of first backup primary name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryNameServer3": {
                    "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer3:ZoneSecondaryCreateInfoPrimaryNameServer3",
                    "description": "(Block Set) The structure of this block follows the same structure as the `name_server` block described above. It is the info of second backup primary name server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "primaryNameServer1"
            ]
        },
        "ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer1:ZoneSecondaryCreateInfoPrimaryNameServer1": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the TSIG key’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer2:ZoneSecondaryCreateInfoPrimaryNameServer2": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the TSIG key’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "ultradns:index/ZoneSecondaryCreateInfoPrimaryNameServer3:ZoneSecondaryCreateInfoPrimaryNameServer3": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(String) If TSIG is enabled for this name server, the TSIG key’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "ultradns:index/ZoneTransferStatusDetails:ZoneTransferStatusDetails": {
            "properties": {
                "lastRefresh": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the date (`MM/dd/yy HH:mm:ss tt vvv`) when the last transfer attempt or refresh was.\u003cbr/\u003e\nExample: `03/18/21 10:20:34 AM GMT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastRefreshStatus": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the status of the last transfer that was attempted. Valid values are `IN_PROGRESS`, `FAILED`, `SUCCESSFUL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastRefreshStatusMessage": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the last transfer’s status message. This is currently shown as failure reason.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextRefresh": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the date (`MM/dd/yy HH:mm:ss tt vvv`) when the next transfer attempt or refresh is.\u003cbr/\u003e\nExample: `03/18/21 10:20:34 AM GMT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastRefresh",
                        "lastRefreshStatus",
                        "lastRefreshStatusMessage",
                        "nextRefresh"
                    ]
                }
            }
        },
        "ultradns:index/getDirPoolNoResponse:getDirPoolNoResponse": {
            "properties": {
                "allNonConfigured": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether or not “no response” is returned for all of the non-configured geographical territories and IP ranges. This can only be set to `true` if there is no entry for rdataInfo, with allNonConfigured is set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (String List) The codes for the geographical territories that make up the “no response” group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoGroupName": {
                    "type": "string",
                    "description": "(Computed) (String) The name for the “no response” GeoIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipGroupName": {
                    "type": "string",
                    "description": "(Computed) (String) The name of the “no response” SourceIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/getDirPoolNoResponseIp:getDirPoolNoResponseIp"
                    },
                    "description": "(Computed) (Block Set) List of nested blocks describing the IP addresses and IP range for the “no response” SourceIP group. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/getDirPoolNoResponseIp:getDirPoolNoResponseIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "(Computed) (String) A single IPv4 or IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "description": "(Computed) (String) The CIDR format (IPv4 or IPv6) for an IP address range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "end": {
                    "type": "string",
                    "description": "(Computed) (String) The ending IP address (IPv4 or IPv6).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "(Computed) (String) The starting IP address (IPv4 or IPv6).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/getDirPoolRdataInfo:getDirPoolRdataInfo": {
            "properties": {
                "allNonConfigured": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether or not “no response” is returned for all of the non-configured geographical territories and IP ranges. This can only be set to `true` if there is no entry for rdataInfo, with allNonConfigured is set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (String List) The codes for the geographical territories that make up the “no response” group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geoGroupName": {
                    "type": "string",
                    "description": "(Computed) (String) The name for the “no response” GeoIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipGroupName": {
                    "type": "string",
                    "description": "(Computed) (String) The name of the “no response” SourceIP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/getDirPoolRdataInfoIp:getDirPoolRdataInfoIp"
                    },
                    "description": "(Computed) (Block Set) List of nested blocks describing the IP addresses and IP range for the “no response” SourceIP group. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) The IPv4/IPv6 address, CNAME, MX, TXT, or SRV format data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Computed) (Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) (String) The type for the specified pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getDirPoolRdataInfoIp:getDirPoolRdataInfoIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "(Computed) (String) A single IPv4 or IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "description": "(Computed) (String) The CIDR format (IPv4 or IPv6) for an IP address range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "end": {
                    "type": "string",
                    "description": "(Computed) (String) The ending IP address (IPv4 or IPv6).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "(Computed) (String) The starting IP address (IPv4 or IPv6).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/getSbPoolBackupRecord:getSbPoolBackupRecord": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies the time, between 0 – 30 minutes, that SiteBacker waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableToServe",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSbPoolRdataInfo:getSbPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies the time, between 0 – 30 minutes, that SiteBacker waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Indicates the serving preference for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether or not probes are run for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "(Computed) (String) The current state of the pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies how many probes must agree before the record state is changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableToServe",
                "priority",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSfPoolBackupRecord:getSfPoolBackupRecord": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Computed) (String) An optional description for the backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) An IPv4 or IPv6 address as a backup record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSfPoolMonitor:getSfPoolMonitor": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "(Computed) (String) HTTP method used to connect to the monitored URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchString": {
                    "type": "string",
                    "description": "(Computed) (String) A string that is checked against the returned data from the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transmittedData": {
                    "type": "string",
                    "description": "(Computed) (String) If a monitor is sending a POST, this is the data that is sent as the body of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "(Computed) (String) Monitored URL. A full URL including the protocol, host, and URI.\nValid protocols are HTTP and HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSlbPoolAllFailRecord:getSlbPoolAllFailRecord": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Computed) (String) An optional description of the record in the live pool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) An IPv4 or IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serving": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Serving status of the AllFail Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rdata",
                "serving"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSlbPoolMonitor:getSlbPoolMonitor": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "(Computed) (String) HTTP method used to connect to the monitored URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchString": {
                    "type": "string",
                    "description": "(Computed) (String) A string that is checked against the returned data from the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transmittedData": {
                    "type": "string",
                    "description": "(Computed) (String) If a monitor is sending a POST, the data that is sent as the body of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "(Computed) (String) Monitored URL. A full URL including the protocol, host, and URI. Valid protocols are HTTP and HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getSlbPoolRdataInfo:getSlbPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether the record is available to be served (true) or not (false), based upon the probe results or the forced state of the record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Computed) (String) An optional description of the record in the live pool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcedState": {
                    "type": "string",
                    "description": "(Computed) (String) The Forced State of the record that indicates whether the record needs to be: force served, forced to be inactive, or the force status not being considered (monitoring result decides the record state).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "probingEnabled": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Can be set at the record level to indicate whether probing is required (true) or not (false) for the given record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) An IPv4 or IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableToServe",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getTcPoolBackupRecord:getTcPoolBackupRecord": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies the time, between 0 – 30 minutes, that the Traffic Controller waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableToServe",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getTcPoolRdataInfo:getTcPoolRdataInfo": {
            "properties": {
                "availableToServe": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether the pool record is active and available to serve records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failoverDelay": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies the time, between 0 – 30 minutes, that the Traffic Controller waits after detecting that the pool record has failed, prior to activating the secondary records. Default value set to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Indicates the serving preference for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rdata": {
                    "type": "string",
                    "description": "(Computed) (String) The IPv4 address or CNAME.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Computed) (Boolean) Indicates whether or not probes are run for this pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "(Computed) (String) The current state of the pool record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Specifies how many probes must agree before the record state is changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "(Optional) (Integer) Determines the traffic load to send to each server in the Traffic Controller pool. Even integers from 2 to 100.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableToServe",
                "priority",
                "rdata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZoneNotifyAddress:getZoneNotifyAddress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Optional) (String) A description of this address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyAddress": {
                    "type": "string",
                    "description": "(Required) (String) The IPv4 Address that is notified when the primary zone is updated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifyAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZonePrimaryNameServer1:getZonePrimaryNameServer1": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(Required) (String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(Required) (String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(Optional) (String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(Required) (String) The value of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZonePrimaryNameServer2:getZonePrimaryNameServer2": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(Required) (String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(Required) (String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(Optional) (String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(Required) (String) The value of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZonePrimaryNameServer3:getZonePrimaryNameServer3": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "(Required) (String) The IPv4 or IPv6 address of the primary name server for the source zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(Required) (String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKey": {
                    "type": "string",
                    "description": "(Optional) (String) If TSIG is enabled for this name server, the name of the TSIG key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(Required) (String) The value of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZoneRegistrarInfo:getZoneRegistrarInfo": {
            "properties": {
                "nameServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/getZoneRegistrarInfoNameServer:getZoneRegistrarInfoNameServer"
                    },
                    "description": "(Computed) (Block Set)  Nested block describing the name servers configuration of the zone. The structure of this block is described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registrar": {
                    "type": "string",
                    "description": "(Computed) (String) The name of the domain registrar.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "whoIsExpiration": {
                    "type": "string",
                    "description": "(Computed) (String) The date (`yyyy-MM-dd HH:mm:ss.S`) when the domain name registration expires.\u003cbr/\u003e\nExample: `2022-08-17 03:59:59.0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nameServers",
                "registrar",
                "whoIsExpiration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZoneRegistrarInfoNameServer:getZoneRegistrarInfoNameServer": {
            "properties": {
                "incorrects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of any obsolete UltraDNS name servers that are still configured for this zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "missings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of UltraDNS name servers that should be configured for this domain, but are not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of UltraDNS name servers that are configured for this domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unknowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) (List String) List of name servers that are configured for this domain, but are not UltraDNS managed name servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incorrects",
                "missings",
                "oks",
                "unknowns"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZoneRestrictIp:getZoneRestrictIp": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "(Optional) (String) The IP Address ranges specified in CIDR.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comment": {
                    "type": "string",
                    "description": "(Optional) (String) A description of this range of IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endIp": {
                    "type": "string",
                    "description": "(Optional) (String) The end of the IPv4 or IPv6 range that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleIp": {
                    "type": "string",
                    "description": "(Optional) (String) The IPv4 or IPv6 address that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startIp": {
                    "type": "string",
                    "description": "(Optional) (String) The start of the IPv4 or IPv6 range that is allowed to transfer this primary zone out using zone transfer protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ultradns:index/getZoneTransferStatusDetail:getZoneTransferStatusDetail": {
            "properties": {
                "lastRefresh": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the date (`MM/dd/yy HH:mm:ss tt vvv`) when the last transfer attempt or refresh was.\u003cbr/\u003e\nExample: `03/18/21 10:20:34 AM GMT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastRefreshStatus": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the status of the last transfer that was attempted. Valid values are `IN_PROGRESS`, `FAILED`, `SUCCESSFUL`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastRefreshStatusMessage": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the last transfer’s status message. This is currently shown as failure reason.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextRefresh": {
                    "type": "string",
                    "description": "(Computed) (String) Displays the date (`MM/dd/yy HH:mm:ss tt vvv`) when the next transfer attempt or refresh is.\u003cbr/\u003e\nExample: `03/18/21 10:20:34 AM GMT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lastRefresh",
                "lastRefreshStatus",
                "lastRefreshStatusMessage",
                "nextRefresh"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ultradns:index/getZoneTsig:getZoneTsig": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Optional) (String) A description of this address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigAlgorithm": {
                    "type": "string",
                    "description": "(Required) (String) The hash algorithm used to generate the TSIG key. Valid values are `hmac-md5`, `hmac-sha1`, `hmac-sha224`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyName": {
                    "type": "string",
                    "description": "(Required) (String) The name of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsigKeyValue": {
                    "type": "string",
                    "description": "(Required) (String) The value of the TSIG key for the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tsigAlgorithm",
                "tsigKeyName",
                "tsigKeyValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the ultradns package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        },
        "inputProperties": {
            "hosturl": {
                "type": "string",
                "description": "Host url for UltraDNS rest api.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for UltraDNS rest api.\n"
            },
            "username": {
                "type": "string",
                "description": "User name for UltraDNS rest api.\n"
            }
        }
    },
    "resources": {
        "ultradns:index/dirPool:DirPool": {
            "description": "Use this resource to manage Directional (DIR) pool records in UltraDNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create DIR pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst dirPool = new ultradns.DirPool(\"a\", {\n    conflictResolve: \"IP\",\n    ignoreEcs: true,\n    noResponse: {\n        geoCodes: [\"AG\"],\n        geoGroupName: \"geo_response_group\",\n        ips: [{\n            address: \"2.2.2.2\",\n        }],\n        ipGroupName: \"ip_response_group\",\n    },\n    ownerName: \"a\",\n    rdataInfos: [\n        {\n            allNonConfigured: true,\n            rdata: \"192.168.1.5\",\n            ttl: 800,\n        },\n        {\n            geoCodes: [\n                \"NAM\",\n                \"EUR\",\n            ],\n            geoGroupName: \"geo_group\",\n            ips: [\n                {\n                    address: \"200.1.1.1\",\n                },\n                {\n                    end: \"200.1.1.5\",\n                    start: \"200.1.1.2\",\n                },\n                {\n                    cidr: \"200.20.20.0/24\",\n                },\n            ],\n            ipGroupName: \"ip_group\",\n            rdata: \"192.168.1.2\",\n        },\n    ],\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ndir_pool = ultradns.DirPool(\"dirPool\",\n    conflict_resolve=\"IP\",\n    ignore_ecs=True,\n    no_response=ultradns.DirPoolNoResponseArgs(\n        geo_codes=[\"AG\"],\n        geo_group_name=\"geo_response_group\",\n        ips=[ultradns.DirPoolNoResponseIpArgs(\n            address=\"2.2.2.2\",\n        )],\n        ip_group_name=\"ip_response_group\",\n    ),\n    owner_name=\"a\",\n    rdata_infos=[\n        ultradns.DirPoolRdataInfoArgs(\n            all_non_configured=True,\n            rdata=\"192.168.1.5\",\n            ttl=800,\n        ),\n        ultradns.DirPoolRdataInfoArgs(\n            geo_codes=[\n                \"NAM\",\n                \"EUR\",\n            ],\n            geo_group_name=\"geo_group\",\n            ips=[\n                ultradns.DirPoolRdataInfoIpArgs(\n                    address=\"200.1.1.1\",\n                ),\n                ultradns.DirPoolRdataInfoIpArgs(\n                    end=\"200.1.1.5\",\n                    start=\"200.1.1.2\",\n                ),\n                ultradns.DirPoolRdataInfoIpArgs(\n                    cidr=\"200.20.20.0/24\",\n                ),\n            ],\n            ip_group_name=\"ip_group\",\n            rdata=\"192.168.1.2\",\n        ),\n    ],\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dirPool = new Ultradns.DirPool(\"dirPool\", new()\n    {\n        ConflictResolve = \"IP\",\n        IgnoreEcs = true,\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            GeoCodes = new[]\n            {\n                \"AG\",\n            },\n            GeoGroupName = \"geo_response_group\",\n            Ips = new[]\n            {\n                new Ultradns.Inputs.DirPoolNoResponseIpArgs\n                {\n                    Address = \"2.2.2.2\",\n                },\n            },\n            IpGroupName = \"ip_response_group\",\n        },\n        OwnerName = \"a\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                AllNonConfigured = true,\n                Rdata = \"192.168.1.5\",\n                Ttl = 800,\n            },\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"NAM\",\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Ips = new[]\n                {\n                    new Ultradns.Inputs.DirPoolRdataInfoIpArgs\n                    {\n                        Address = \"200.1.1.1\",\n                    },\n                    new Ultradns.Inputs.DirPoolRdataInfoIpArgs\n                    {\n                        End = \"200.1.1.5\",\n                        Start = \"200.1.1.2\",\n                    },\n                    new Ultradns.Inputs.DirPoolRdataInfoIpArgs\n                    {\n                        Cidr = \"200.20.20.0/24\",\n                    },\n                },\n                IpGroupName = \"ip_group\",\n                Rdata = \"192.168.1.2\",\n            },\n        },\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"dirPool\", \u0026ultradns.DirPoolArgs{\n\t\t\tConflictResolve: pulumi.String(\"IP\"),\n\t\t\tIgnoreEcs:       pulumi.Bool(true),\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AG\"),\n\t\t\t\t},\n\t\t\t\tGeoGroupName: pulumi.String(\"geo_response_group\"),\n\t\t\t\tIps: DirPoolNoResponseIpArray{\n\t\t\t\t\t\u0026DirPoolNoResponseIpArgs{\n\t\t\t\t\t\tAddress: pulumi.String(\"2.2.2.2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIpGroupName: pulumi.String(\"ip_response_group\"),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"a\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tAllNonConfigured: pulumi.Bool(true),\n\t\t\t\t\tRdata:            pulumi.String(\"192.168.1.5\"),\n\t\t\t\t\tTtl:              pulumi.Int(800),\n\t\t\t\t},\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NAM\"),\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tIps: DirPoolRdataInfoIpArray{\n\t\t\t\t\t\t\u0026DirPoolRdataInfoIpArgs{\n\t\t\t\t\t\t\tAddress: pulumi.String(\"200.1.1.1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026DirPoolRdataInfoIpArgs{\n\t\t\t\t\t\t\tEnd:   pulumi.String(\"200.1.1.5\"),\n\t\t\t\t\t\t\tStart: pulumi.String(\"200.1.1.2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026DirPoolRdataInfoIpArgs{\n\t\t\t\t\t\t\tCidr: pulumi.String(\"200.20.20.0/24\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tIpGroupName: pulumi.String(\"ip_group\"),\n\t\t\t\t\tRdata:       pulumi.String(\"192.168.1.2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"A\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dirPool = new DirPool(\"dirPool\", DirPoolArgs.builder()        \n            .conflictResolve(\"IP\")\n            .ignoreEcs(true)\n            .noResponse(DirPoolNoResponseArgs.builder()\n                .geoCodes(\"AG\")\n                .geoGroupName(\"geo_response_group\")\n                .ips(DirPoolNoResponseIpArgs.builder()\n                    .address(\"2.2.2.2\")\n                    .build())\n                .ipGroupName(\"ip_response_group\")\n                .build())\n            .ownerName(\"a\")\n            .rdataInfos(            \n                DirPoolRdataInfoArgs.builder()\n                    .allNonConfigured(true)\n                    .rdata(\"192.168.1.5\")\n                    .ttl(800)\n                    .build(),\n                DirPoolRdataInfoArgs.builder()\n                    .geoCodes(                    \n                        \"NAM\",\n                        \"EUR\")\n                    .geoGroupName(\"geo_group\")\n                    .ips(                    \n                        DirPoolRdataInfoIpArgs.builder()\n                            .address(\"200.1.1.1\")\n                            .build(),\n                        DirPoolRdataInfoIpArgs.builder()\n                            .end(\"200.1.1.5\")\n                            .start(\"200.1.1.2\")\n                            .build(),\n                        DirPoolRdataInfoIpArgs.builder()\n                            .cidr(\"200.20.20.0/24\")\n                            .build())\n                    .ipGroupName(\"ip_group\")\n                    .rdata(\"192.168.1.2\")\n                    .build())\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dirPool:\n    type: ultradns:DirPool\n    properties:\n      conflictResolve: IP\n      ignoreEcs: true\n      noResponse:\n        geoCodes:\n          - AG\n        geoGroupName: geo_response_group\n        ips:\n          - address: 2.2.2.2\n        ipGroupName: ip_response_group\n      ownerName: a\n      rdataInfos:\n        - allNonConfigured: true\n          rdata: 192.168.1.5\n          ttl: 800\n        - geoCodes:\n            - NAM\n            - EUR\n          geoGroupName: geo_group\n          ips:\n            - address: 200.1.1.1\n            - end: 200.1.1.5\n              start: 200.1.1.2\n            - cidr: 200.20.20.0/24\n          ipGroupName: ip_group\n          rdata: 192.168.1.2\n      recordType: A\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DIR pool record of type PTR (12)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst ptr = new ultradns.DirPool(\"ptr\", {\n    noResponse: {\n        allNonConfigured: true,\n    },\n    ownerName: \"1\",\n    rdataInfos: [{\n        geoCodes: [\n            \"NAM\",\n            \"EUR\",\n        ],\n        geoGroupName: \"geo_group\",\n        rdata: \"ns1.example.com.\",\n    }],\n    recordType: \"PTR\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nptr = ultradns.DirPool(\"ptr\",\n    no_response=ultradns.DirPoolNoResponseArgs(\n        all_non_configured=True,\n    ),\n    owner_name=\"1\",\n    rdata_infos=[ultradns.DirPoolRdataInfoArgs(\n        geo_codes=[\n            \"NAM\",\n            \"EUR\",\n        ],\n        geo_group_name=\"geo_group\",\n        rdata=\"ns1.example.com.\",\n    )],\n    record_type=\"PTR\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ptr = new Ultradns.DirPool(\"ptr\", new()\n    {\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            AllNonConfigured = true,\n        },\n        OwnerName = \"1\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"NAM\",\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Rdata = \"ns1.example.com.\",\n            },\n        },\n        RecordType = \"PTR\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"ptr\", \u0026ultradns.DirPoolArgs{\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tAllNonConfigured: pulumi.Bool(true),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"1\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NAM\"),\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tRdata:        pulumi.String(\"ns1.example.com.\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"PTR\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ptr = new DirPool(\"ptr\", DirPoolArgs.builder()        \n            .noResponse(DirPoolNoResponseArgs.builder()\n                .allNonConfigured(true)\n                .build())\n            .ownerName(\"1\")\n            .rdataInfos(DirPoolRdataInfoArgs.builder()\n                .geoCodes(                \n                    \"NAM\",\n                    \"EUR\")\n                .geoGroupName(\"geo_group\")\n                .rdata(\"ns1.example.com.\")\n                .build())\n            .recordType(\"PTR\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ptr:\n    type: ultradns:DirPool\n    properties:\n      noResponse:\n        allNonConfigured: true\n      ownerName: 1\n      rdataInfos:\n        - geoCodes:\n            - NAM\n            - EUR\n          geoGroupName: geo_group\n          rdata: ns1.example.com.\n      recordType: PTR\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DIR pool record of type MX (15)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst mx = new ultradns.DirPool(\"mx\", {\n    noResponse: {\n        allNonConfigured: true,\n    },\n    ownerName: \"mx\",\n    rdataInfos: [{\n        geoCodes: [\n            \"NAM\",\n            \"EUR\",\n        ],\n        geoGroupName: \"geo_group\",\n        rdata: \"2 example.com.\",\n    }],\n    recordType: \"MX\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nmx = ultradns.DirPool(\"mx\",\n    no_response=ultradns.DirPoolNoResponseArgs(\n        all_non_configured=True,\n    ),\n    owner_name=\"mx\",\n    rdata_infos=[ultradns.DirPoolRdataInfoArgs(\n        geo_codes=[\n            \"NAM\",\n            \"EUR\",\n        ],\n        geo_group_name=\"geo_group\",\n        rdata=\"2 example.com.\",\n    )],\n    record_type=\"MX\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mx = new Ultradns.DirPool(\"mx\", new()\n    {\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            AllNonConfigured = true,\n        },\n        OwnerName = \"mx\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"NAM\",\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Rdata = \"2 example.com.\",\n            },\n        },\n        RecordType = \"MX\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"mx\", \u0026ultradns.DirPoolArgs{\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tAllNonConfigured: pulumi.Bool(true),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"mx\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NAM\"),\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tRdata:        pulumi.String(\"2 example.com.\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"MX\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mx = new DirPool(\"mx\", DirPoolArgs.builder()        \n            .noResponse(DirPoolNoResponseArgs.builder()\n                .allNonConfigured(true)\n                .build())\n            .ownerName(\"mx\")\n            .rdataInfos(DirPoolRdataInfoArgs.builder()\n                .geoCodes(                \n                    \"NAM\",\n                    \"EUR\")\n                .geoGroupName(\"geo_group\")\n                .rdata(\"2 example.com.\")\n                .build())\n            .recordType(\"MX\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mx:\n    type: ultradns:DirPool\n    properties:\n      noResponse:\n        allNonConfigured: true\n      ownerName: mx\n      rdataInfos:\n        - geoCodes:\n            - NAM\n            - EUR\n          geoGroupName: geo_group\n          rdata: 2 example.com.\n      recordType: MX\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DIR pool record of type TXT (16)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst txt = new ultradns.DirPool(\"txt\", {\n    noResponse: {\n        allNonConfigured: true,\n    },\n    ownerName: \"txt.example.com.\",\n    rdataInfos: [{\n        geoCodes: [\n            \"NAM\",\n            \"EUR\",\n        ],\n        geoGroupName: \"geo_group\",\n        rdata: \"text data\",\n    }],\n    recordType: \"TXT\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ntxt = ultradns.DirPool(\"txt\",\n    no_response=ultradns.DirPoolNoResponseArgs(\n        all_non_configured=True,\n    ),\n    owner_name=\"txt.example.com.\",\n    rdata_infos=[ultradns.DirPoolRdataInfoArgs(\n        geo_codes=[\n            \"NAM\",\n            \"EUR\",\n        ],\n        geo_group_name=\"geo_group\",\n        rdata=\"text data\",\n    )],\n    record_type=\"TXT\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var txt = new Ultradns.DirPool(\"txt\", new()\n    {\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            AllNonConfigured = true,\n        },\n        OwnerName = \"txt.example.com.\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"NAM\",\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Rdata = \"text data\",\n            },\n        },\n        RecordType = \"TXT\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"txt\", \u0026ultradns.DirPoolArgs{\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tAllNonConfigured: pulumi.Bool(true),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"txt.example.com.\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NAM\"),\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tRdata:        pulumi.String(\"text data\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"TXT\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var txt = new DirPool(\"txt\", DirPoolArgs.builder()        \n            .noResponse(DirPoolNoResponseArgs.builder()\n                .allNonConfigured(true)\n                .build())\n            .ownerName(\"txt.example.com.\")\n            .rdataInfos(DirPoolRdataInfoArgs.builder()\n                .geoCodes(                \n                    \"NAM\",\n                    \"EUR\")\n                .geoGroupName(\"geo_group\")\n                .rdata(\"text data\")\n                .build())\n            .recordType(\"TXT\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  txt:\n    type: ultradns:DirPool\n    properties:\n      noResponse:\n        allNonConfigured: true\n      ownerName: txt.example.com.\n      rdataInfos:\n        - geoCodes:\n            - NAM\n            - EUR\n          geoGroupName: geo_group\n          rdata: text data\n      recordType: TXT\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DIR pool record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.DirPool(\"aaaa\", {\n    conflictResolve: \"IP\",\n    ignoreEcs: true,\n    noResponse: {\n        geoCodes: [\"AI\"],\n        geoGroupName: \"geo_response_group\",\n        ips: [{\n            address: \"aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\",\n        }],\n        ipGroupName: \"ip_response_group\",\n    },\n    ownerName: \"aaaa\",\n    poolDescription: \"DIR Pool Resource of type AAAA\",\n    rdataInfos: [{\n        geoCodes: [\"EUR\"],\n        geoGroupName: \"geo_group\",\n        ips: [{\n            end: \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\",\n            start: \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\",\n        }],\n        ipGroupName: \"ip_group\",\n        rdata: \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\",\n    }],\n    recordType: \"AAAA\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.DirPool(\"aaaa\",\n    conflict_resolve=\"IP\",\n    ignore_ecs=True,\n    no_response=ultradns.DirPoolNoResponseArgs(\n        geo_codes=[\"AI\"],\n        geo_group_name=\"geo_response_group\",\n        ips=[ultradns.DirPoolNoResponseIpArgs(\n            address=\"aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\",\n        )],\n        ip_group_name=\"ip_response_group\",\n    ),\n    owner_name=\"aaaa\",\n    pool_description=\"DIR Pool Resource of type AAAA\",\n    rdata_infos=[ultradns.DirPoolRdataInfoArgs(\n        geo_codes=[\"EUR\"],\n        geo_group_name=\"geo_group\",\n        ips=[ultradns.DirPoolRdataInfoIpArgs(\n            end=\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\",\n            start=\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\",\n        )],\n        ip_group_name=\"ip_group\",\n        rdata=\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\",\n    )],\n    record_type=\"AAAA\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.DirPool(\"aaaa\", new()\n    {\n        ConflictResolve = \"IP\",\n        IgnoreEcs = true,\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            GeoCodes = new[]\n            {\n                \"AI\",\n            },\n            GeoGroupName = \"geo_response_group\",\n            Ips = new[]\n            {\n                new Ultradns.Inputs.DirPoolNoResponseIpArgs\n                {\n                    Address = \"aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\",\n                },\n            },\n            IpGroupName = \"ip_response_group\",\n        },\n        OwnerName = \"aaaa\",\n        PoolDescription = \"DIR Pool Resource of type AAAA\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Ips = new[]\n                {\n                    new Ultradns.Inputs.DirPoolRdataInfoIpArgs\n                    {\n                        End = \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\",\n                        Start = \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\",\n                    },\n                },\n                IpGroupName = \"ip_group\",\n                Rdata = \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\",\n            },\n        },\n        RecordType = \"AAAA\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"aaaa\", \u0026ultradns.DirPoolArgs{\n\t\t\tConflictResolve: pulumi.String(\"IP\"),\n\t\t\tIgnoreEcs:       pulumi.Bool(true),\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AI\"),\n\t\t\t\t},\n\t\t\t\tGeoGroupName: pulumi.String(\"geo_response_group\"),\n\t\t\t\tIps: DirPoolNoResponseIpArray{\n\t\t\t\t\t\u0026DirPoolNoResponseIpArgs{\n\t\t\t\t\t\tAddress: pulumi.String(\"aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIpGroupName: pulumi.String(\"ip_response_group\"),\n\t\t\t},\n\t\t\tOwnerName:       pulumi.String(\"aaaa\"),\n\t\t\tPoolDescription: pulumi.String(\"DIR Pool Resource of type AAAA\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tIps: DirPoolRdataInfoIpArray{\n\t\t\t\t\t\t\u0026DirPoolRdataInfoIpArgs{\n\t\t\t\t\t\t\tEnd:   pulumi.String(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\"),\n\t\t\t\t\t\t\tStart: pulumi.String(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tIpGroupName: pulumi.String(\"ip_group\"),\n\t\t\t\t\tRdata:       pulumi.String(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"AAAA\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new DirPool(\"aaaa\", DirPoolArgs.builder()        \n            .conflictResolve(\"IP\")\n            .ignoreEcs(true)\n            .noResponse(DirPoolNoResponseArgs.builder()\n                .geoCodes(\"AI\")\n                .geoGroupName(\"geo_response_group\")\n                .ips(DirPoolNoResponseIpArgs.builder()\n                    .address(\"aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\")\n                    .build())\n                .ipGroupName(\"ip_response_group\")\n                .build())\n            .ownerName(\"aaaa\")\n            .poolDescription(\"DIR Pool Resource of type AAAA\")\n            .rdataInfos(DirPoolRdataInfoArgs.builder()\n                .geoCodes(\"EUR\")\n                .geoGroupName(\"geo_group\")\n                .ips(DirPoolRdataInfoIpArgs.builder()\n                    .end(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\")\n                    .start(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\")\n                    .build())\n                .ipGroupName(\"ip_group\")\n                .rdata(\"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\")\n                .build())\n            .recordType(\"AAAA\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:DirPool\n    properties:\n      conflictResolve: IP\n      ignoreEcs: true\n      noResponse:\n        geoCodes:\n          - AI\n        geoGroupName: geo_response_group\n        ips:\n          - address: aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555\n        ipGroupName: ip_response_group\n      ownerName: aaaa\n      poolDescription: DIR Pool Resource of type AAAA\n      rdataInfos:\n        - geoCodes:\n            - EUR\n          geoGroupName: geo_group\n          ips:\n            - end: aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666\n              start: aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444\n          ipGroupName: ip_group\n          rdata: aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333\n      recordType: AAAA\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DIR pool record of type SRV (33)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst srv = new ultradns.DirPool(\"srv\", {\n    noResponse: {\n        allNonConfigured: true,\n    },\n    ownerName: \"srv\",\n    rdataInfos: [{\n        geoCodes: [\n            \"NAM\",\n            \"EUR\",\n        ],\n        geoGroupName: \"geo_group\",\n        rdata: \"5 6 7 example.com.\",\n    }],\n    recordType: \"SRV\",\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsrv = ultradns.DirPool(\"srv\",\n    no_response=ultradns.DirPoolNoResponseArgs(\n        all_non_configured=True,\n    ),\n    owner_name=\"srv\",\n    rdata_infos=[ultradns.DirPoolRdataInfoArgs(\n        geo_codes=[\n            \"NAM\",\n            \"EUR\",\n        ],\n        geo_group_name=\"geo_group\",\n        rdata=\"5 6 7 example.com.\",\n    )],\n    record_type=\"SRV\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var srv = new Ultradns.DirPool(\"srv\", new()\n    {\n        NoResponse = new Ultradns.Inputs.DirPoolNoResponseArgs\n        {\n            AllNonConfigured = true,\n        },\n        OwnerName = \"srv\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.DirPoolRdataInfoArgs\n            {\n                GeoCodes = new[]\n                {\n                    \"NAM\",\n                    \"EUR\",\n                },\n                GeoGroupName = \"geo_group\",\n                Rdata = \"5 6 7 example.com.\",\n            },\n        },\n        RecordType = \"SRV\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewDirPool(ctx, \"srv\", \u0026ultradns.DirPoolArgs{\n\t\t\tNoResponse: \u0026DirPoolNoResponseArgs{\n\t\t\t\tAllNonConfigured: pulumi.Bool(true),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"srv\"),\n\t\t\tRdataInfos: DirPoolRdataInfoArray{\n\t\t\t\t\u0026DirPoolRdataInfoArgs{\n\t\t\t\t\tGeoCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NAM\"),\n\t\t\t\t\t\tpulumi.String(\"EUR\"),\n\t\t\t\t\t},\n\t\t\t\t\tGeoGroupName: pulumi.String(\"geo_group\"),\n\t\t\t\t\tRdata:        pulumi.String(\"5 6 7 example.com.\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"SRV\"),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.DirPool;\nimport com.pulumi.ultradns.DirPoolArgs;\nimport com.pulumi.ultradns.inputs.DirPoolNoResponseArgs;\nimport com.pulumi.ultradns.inputs.DirPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var srv = new DirPool(\"srv\", DirPoolArgs.builder()        \n            .noResponse(DirPoolNoResponseArgs.builder()\n                .allNonConfigured(true)\n                .build())\n            .ownerName(\"srv\")\n            .rdataInfos(DirPoolRdataInfoArgs.builder()\n                .geoCodes(                \n                    \"NAM\",\n                    \"EUR\")\n                .geoGroupName(\"geo_group\")\n                .rdata(\"5 6 7 example.com.\")\n                .build())\n            .recordType(\"SRV\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  srv:\n    type: ultradns:DirPool\n    properties:\n      noResponse:\n        allNonConfigured: true\n      ownerName: srv\n      rdataInfos:\n        - geoCodes:\n            - NAM\n            - EUR\n          geoGroupName: geo_group\n          rdata: 5 6 7 example.com.\n      recordType: SRV\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n## Valid GEO Codes:\n\n| Code \t| Meaning | Equivalent ISO codes |\n| :--- \t| :----: | :--- |\n|_________________________|__________________________________________________|__________________________________________________|\n| `A1`  | Anonymous Proxy | None |\n|_________________________|__________________________________________________|__________________________________________________|\n| `A2`\t| Satellite Provider | None |\n|_________________________|__________________________________________________|__________________________________________________|\n| `A3`\t| Unknown / Uncategorized IPs | None |\n|_________________________|__________________________________________________|__________________________________________________|\n| `NAM`\t| North America (including Central America and the Caribbean) | `AG`,`AI`,`AN`,`AW`,`BB`,`BL`,`BM`,\u003c/br\u003e`BQ`,`BS`,`BZ`,`CA`,`CR`,`CU`,`CW`,\u003c/br\u003e`DM`,`DO`,`GD`,`GL`,`GP`,`GT`,`HN`,\u003c/br\u003e`HT`,`JM`,`KN`,`KY`,`LC`,`MF`,`MQ`,\u003c/br\u003e`MS`,`MX`,`NI`,`PA`,`PM`,`PR`,`SV`,\u003c/br\u003e`SX`,`TC`,`TT`,`U3`,`US`,`VC`,`VG`,\u003c/br\u003e`VI` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `SAM`\t| South America | `AR`,`BO`,`BR`,`CL`,`CO`,`EC`,`FK`,\u003c/br\u003e`GF`,`GS`,`GY`,`PE`,`PY`,`SR`,`U4`,\u003c/br\u003e`UY`,`VE` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `EUR`\t| Europe | `AD`,`AL`,`AM`,`AT`,`AX`,`AZ`,`BA`,\u003c/br\u003e`BE`,`BG`,`BY`,`CH`,`CZ`,`DE`,`DK`,\u003c/br\u003e`EE`,`ES`,`FI`,`FO`,`FR`,`GB`,`GE`,\u003c/br\u003e`GG`,`GI`,`GR`,`HR`,`HU`,`IE`,`IM`,\u003c/br\u003e`IS`,`IT`,`JE`,`LI`,`LT`,`LU`,`LV`,\u003c/br\u003e`MC`,`MD`,`ME`,`MK`,`MT`,`NL`,`NO`,\u003c/br\u003e`PL`,`PT`,`RO`,`RS`,`SE`,`SI`,`SJ`,\u003c/br\u003e`SK`,`SM`,`U5`,`UA`,`VA` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `AFR`\t| Africa | `AO`,`BF`,`BI`,`BJ`,`BW`,`CD`,`CF`,\u003c/br\u003e`CG`,`CI`,`CM`,`CV`,`DJ`,`DZ`,`EG`,\u003c/br\u003e`EH`,`ER`,`ET`,`GA`,`GH`,`GM`,`GN`,\u003c/br\u003e`GQ`,`GW`,`KE`,`KM`,`LR`,`LS`,`LY`,\u003c/br\u003e`MA`,`MG`,`ML`,`MR`,`MU`,`MW`,`MZ`,\u003c/br\u003e`NA`,`NE`,`NG`,`RE`,`RW`,`SC`,`SD`,\u003c/br\u003e`SH`,`SL`,`SN`,`SO`,`SS`,`ST`,`SZ`,\u003c/br\u003e`TD`,`TG`,`TN`,`TZ`,`U7`,`UG`,`YT`,\u003c/br\u003e`ZA`,`ZM`,`ZW` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `ASI`\t| Asia (including Middle East and the Russian Federation) | `AE`,`AF`,`BD`,`BH`,`BN`,`BT`,`CN`,\u003c/br\u003e`CY`,`HK`,`ID`,`IL`,`IN`,`IO`,`IQ`,\u003c/br\u003e`IR`,`JO`,`JP`,`KG`,`KH`,`KP`,`KR`,\u003c/br\u003e`KW`,`KZ`,`LA`,`LB`,`LK`,`MM`,`MN`,\u003c/br\u003e`MO`,`MV`,`MY`,`NP`,`OM`,`PH`,`PK`,\u003c/br\u003e`PS`,`QA`,`RU`,`SA`,`SG`,`SY`,`TH`,\u003c/br\u003e`TJ`,`TL`,`TM`,`TR`,`TW`,`U6`,`U8`,\u003c/br\u003e`UZ`,`VN`,`YE` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `OCN`\t| Australia / Oceania | `AS`,`AU`,`CC`,`CK`,`CX`,`FJ`,`FM`,\u003c/br\u003e`GU`,`HM`,`KI`,`MH`,`MP`,`NC`,`NF`,\u003c/br\u003e`NR`,`NU`,`NZ`,`PF`,`PG`,`PN`,`PW`,\u003c/br\u003e`SB`,`TK`,`TO`,`TV`,`U9`,`UM`,`VU`,\u003c/br\u003e`WF`,`WS` |\n|_________________________|__________________________________________________|__________________________________________________|\n| `ANT`\t| Antarctica | `AQ`, `TF`, `BV` |\n|_________________________|__________________________________________________|__________________________________________________|\n\n\n## Import\n\nDirectional (DIR) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/dirPool:DirPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "conflictResolve": {
                    "type": "string",
                    "description": "(String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.\n"
                },
                "ignoreEcs": {
                    "type": "boolean",
                    "description": "(Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.\u003c/br\u003e\n`false`= EDNSO data will be used for IP directional routing.\u003c/br\u003e\n`true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.\u003c/br\u003e\nDefault value set to false.\n"
                },
                "noResponse": {
                    "$ref": "#/types/ultradns:index/DirPoolNoResponse:DirPoolNoResponse",
                    "description": "(Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) Allows for an additional description of the Directional (DIR) pool.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/DirPoolRdataInfo:DirPoolRdataInfo"
                    },
                    "description": "(Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "ownerName",
                "rdataInfos",
                "recordType",
                "ttl",
                "zoneName"
            ],
            "inputProperties": {
                "conflictResolve": {
                    "type": "string",
                    "description": "(String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.\n"
                },
                "ignoreEcs": {
                    "type": "boolean",
                    "description": "(Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.\u003c/br\u003e\n`false`= EDNSO data will be used for IP directional routing.\u003c/br\u003e\n`true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.\u003c/br\u003e\nDefault value set to false.\n"
                },
                "noResponse": {
                    "$ref": "#/types/ultradns:index/DirPoolNoResponse:DirPoolNoResponse",
                    "description": "(Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) Allows for an additional description of the Directional (DIR) pool.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/DirPoolRdataInfo:DirPoolRdataInfo"
                    },
                    "description": "(Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n",
                    "willReplaceOnChanges": true
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ownerName",
                "rdataInfos",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirPool resources.\n",
                "properties": {
                    "conflictResolve": {
                        "type": "string",
                        "description": "(String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.\n"
                    },
                    "ignoreEcs": {
                        "type": "boolean",
                        "description": "(Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.\u003c/br\u003e\n`false`= EDNSO data will be used for IP directional routing.\u003c/br\u003e\n`true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.\u003c/br\u003e\nDefault value set to false.\n"
                    },
                    "noResponse": {
                        "$ref": "#/types/ultradns:index/DirPoolNoResponse:DirPoolNoResponse",
                        "description": "(Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(String) Allows for an additional description of the Directional (DIR) pool.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/DirPoolRdataInfo:DirPoolRdataInfo"
                        },
                        "description": "(Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/rdPool:RdPool": {
            "description": "Use this resource to manage resource distribution pool records in UltraDNS\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create RD pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst rdPool = new ultradns.RdPool(\"a\", {\n    order: \"RANDOM\",\n    ownerName: \"a\",\n    recordDatas: [\"192.168.1.1\"],\n    recordType: \"1\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nrd_pool = ultradns.RdPool(\"rdPool\",\n    order=\"RANDOM\",\n    owner_name=\"a\",\n    record_datas=[\"192.168.1.1\"],\n    record_type=\"1\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rdPool = new Ultradns.RdPool(\"rdPool\", new()\n    {\n        Order = \"RANDOM\",\n        OwnerName = \"a\",\n        RecordDatas = new[]\n        {\n            \"192.168.1.1\",\n        },\n        RecordType = \"1\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRdPool(ctx, \"rdPool\", \u0026ultradns.RdPoolArgs{\n\t\t\tOrder:     pulumi.String(\"RANDOM\"),\n\t\t\tOwnerName: pulumi.String(\"a\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"1\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.RdPool;\nimport com.pulumi.ultradns.RdPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var rdPool = new RdPool(\"rdPool\", RdPoolArgs.builder()        \n            .order(\"RANDOM\")\n            .ownerName(\"a\")\n            .recordDatas(\"192.168.1.1\")\n            .recordType(\"1\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  rdPool:\n    type: ultradns:RdPool\n    properties:\n      order: RANDOM\n      ownerName: a\n      recordDatas:\n        - 192.168.1.1\n      recordType: 1\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create RD pool record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.RdPool(\"aaaa\", {\n    order: \"ROUND_ROBIN\",\n    ownerName: \"aaaa\",\n    recordDatas: [\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    recordType: \"AAAA\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.RdPool(\"aaaa\",\n    order=\"ROUND_ROBIN\",\n    owner_name=\"aaaa\",\n    record_datas=[\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    record_type=\"AAAA\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.RdPool(\"aaaa\", new()\n    {\n        Order = \"ROUND_ROBIN\",\n        OwnerName = \"aaaa\",\n        RecordDatas = new[]\n        {\n            \"2001:db8:85a3:0:0:8a2e:370:7334\",\n        },\n        RecordType = \"AAAA\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRdPool(ctx, \"aaaa\", \u0026ultradns.RdPoolArgs{\n\t\t\tOrder:     pulumi.String(\"ROUND_ROBIN\"),\n\t\t\tOwnerName: pulumi.String(\"aaaa\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7334\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"AAAA\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.RdPool;\nimport com.pulumi.ultradns.RdPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new RdPool(\"aaaa\", RdPoolArgs.builder()        \n            .order(\"ROUND_ROBIN\")\n            .ownerName(\"aaaa\")\n            .recordDatas(\"2001:db8:85a3:0:0:8a2e:370:7334\")\n            .recordType(\"AAAA\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:RdPool\n    properties:\n      order: ROUND_ROBIN\n      ownerName: aaaa\n      recordDatas:\n        - 2001:db8:85a3:0:0:8a2e:370:7334\n      recordType: AAAA\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nResource Distribution (RD) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type as well as the corresponding number as shown in the example above. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/rdPool:RdPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) An optional description of the RD pool.\n"
                },
                "order": {
                    "type": "string",
                    "description": "(String) The order of the records will be returned in. Valid values are `FIXED`, `RANDOM`, `ROUND_ROBIN`.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A or AAAA) or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number::\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "order",
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "(String) An optional description of the RD pool.\n"
                },
                "order": {
                    "type": "string",
                    "description": "(String) The order of the records will be returned in. Valid values are `FIXED`, `RANDOM`, `ROUND_ROBIN`.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A or AAAA) or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number::\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "order",
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) An optional description of the RD pool.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "(String) The order of the records will be returned in. Valid values are `FIXED`, `RANDOM`, `ROUND_ROBIN`.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as the well-known resource record type (A or AAAA) or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number::\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/record:Record": {
            "description": "Use this resource to manage standard DNS records in UltraDNS\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create DNS record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst record = new ultradns.Record(\"a\", {\n    ownerName: \"a\",\n    recordDatas: [\"192.168.1.1\"],\n    recordType: \"1\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nrecord = ultradns.Record(\"record\",\n    owner_name=\"a\",\n    record_datas=[\"192.168.1.1\"],\n    record_type=\"1\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var record = new Ultradns.Record(\"record\", new()\n    {\n        OwnerName = \"a\",\n        RecordDatas = new[]\n        {\n            \"192.168.1.1\",\n        },\n        RecordType = \"1\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"record\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"a\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"1\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var record = new Record(\"record\", RecordArgs.builder()        \n            .ownerName(\"a\")\n            .recordDatas(\"192.168.1.1\")\n            .recordType(\"1\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  record:\n    type: ultradns:Record\n    properties:\n      ownerName: a\n      recordDatas:\n        - 192.168.1.1\n      recordType: 1\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type NS (2)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst ns = new ultradns.Record(\"ns\", {\n    ownerName: \"example.com.\",\n    recordDatas: [\n        \"ns11.sample.com.\",\n        \"ns12.sample.com.\",\n    ],\n    recordType: \"NS\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nns = ultradns.Record(\"ns\",\n    owner_name=\"example.com.\",\n    record_datas=[\n        \"ns11.sample.com.\",\n        \"ns12.sample.com.\",\n    ],\n    record_type=\"NS\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ns = new Ultradns.Record(\"ns\", new()\n    {\n        OwnerName = \"example.com.\",\n        RecordDatas = new[]\n        {\n            \"ns11.sample.com.\",\n            \"ns12.sample.com.\",\n        },\n        RecordType = \"NS\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"ns\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"example.com.\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ns11.sample.com.\"),\n\t\t\t\tpulumi.String(\"ns12.sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"NS\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ns = new Record(\"ns\", RecordArgs.builder()        \n            .ownerName(\"example.com.\")\n            .recordDatas(            \n                \"ns11.sample.com.\",\n                \"ns12.sample.com.\")\n            .recordType(\"NS\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ns:\n    type: ultradns:Record\n    properties:\n      ownerName: example.com.\n      recordDatas:\n        - ns11.sample.com.\n        - ns12.sample.com.\n      recordType: NS\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type CNAME (5)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst cname = new ultradns.Record(\"cname\", {\n    ownerName: \"cname\",\n    recordDatas: [\"host.sample.com.\"],\n    recordType: \"CNAME\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ncname = ultradns.Record(\"cname\",\n    owner_name=\"cname\",\n    record_datas=[\"host.sample.com.\"],\n    record_type=\"CNAME\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cname = new Ultradns.Record(\"cname\", new()\n    {\n        OwnerName = \"cname\",\n        RecordDatas = new[]\n        {\n            \"host.sample.com.\",\n        },\n        RecordType = \"CNAME\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"cname\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"cname\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"host.sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cname = new Record(\"cname\", RecordArgs.builder()        \n            .ownerName(\"cname\")\n            .recordDatas(\"host.sample.com.\")\n            .recordType(\"CNAME\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cname:\n    type: ultradns:Record\n    properties:\n      ownerName: cname\n      recordDatas:\n        - host.sample.com.\n      recordType: CNAME\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type PTR (12)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst ptr = new ultradns.Record(\"ptr\", {\n    ownerName: \"1\",\n    recordDatas: [\"ns1.example.com.\"],\n    recordType: \"12\",\n    ttl: 120,\n    zoneName: \"70.154.156.in-addr.arpa.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nptr = ultradns.Record(\"ptr\",\n    owner_name=\"1\",\n    record_datas=[\"ns1.example.com.\"],\n    record_type=\"12\",\n    ttl=120,\n    zone_name=\"70.154.156.in-addr.arpa.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ptr = new Ultradns.Record(\"ptr\", new()\n    {\n        OwnerName = \"1\",\n        RecordDatas = new[]\n        {\n            \"ns1.example.com.\",\n        },\n        RecordType = \"12\",\n        Ttl = 120,\n        ZoneName = \"70.154.156.in-addr.arpa.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"ptr\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"1\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ns1.example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"12\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"70.154.156.in-addr.arpa.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ptr = new Record(\"ptr\", RecordArgs.builder()        \n            .ownerName(\"1\")\n            .recordDatas(\"ns1.example.com.\")\n            .recordType(\"12\")\n            .ttl(120)\n            .zoneName(\"70.154.156.in-addr.arpa.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ptr:\n    type: ultradns:Record\n    properties:\n      ownerName: 1\n      recordDatas:\n        - ns1.example.com.\n      recordType: 12\n      ttl: 120\n      zoneName: 70.154.156.in-addr.arpa.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type MX (15)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst mx = new ultradns.Record(\"mx\", {\n    ownerName: \"mx\",\n    recordDatas: [\"2 example.com.\"],\n    recordType: \"15\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nmx = ultradns.Record(\"mx\",\n    owner_name=\"mx\",\n    record_datas=[\"2 example.com.\"],\n    record_type=\"15\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mx = new Ultradns.Record(\"mx\", new()\n    {\n        OwnerName = \"mx\",\n        RecordDatas = new[]\n        {\n            \"2 example.com.\",\n        },\n        RecordType = \"15\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"mx\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"mx\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2 example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"15\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mx = new Record(\"mx\", RecordArgs.builder()        \n            .ownerName(\"mx\")\n            .recordDatas(\"2 example.com.\")\n            .recordType(\"15\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mx:\n    type: ultradns:Record\n    properties:\n      ownerName: mx\n      recordDatas:\n        - 2 example.com.\n      recordType: 15\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type TXT (16)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst txt = new ultradns.Record(\"txt\", {\n    ownerName: \"txt\",\n    recordDatas: [\"text data\"],\n    recordType: \"TXT\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ntxt = ultradns.Record(\"txt\",\n    owner_name=\"txt\",\n    record_datas=[\"text data\"],\n    record_type=\"TXT\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var txt = new Ultradns.Record(\"txt\", new()\n    {\n        OwnerName = \"txt\",\n        RecordDatas = new[]\n        {\n            \"text data\",\n        },\n        RecordType = \"TXT\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"txt\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"txt\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"text data\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"TXT\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var txt = new Record(\"txt\", RecordArgs.builder()        \n            .ownerName(\"txt\")\n            .recordDatas(\"text data\")\n            .recordType(\"TXT\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  txt:\n    type: ultradns:Record\n    properties:\n      ownerName: txt\n      recordDatas:\n        - text data\n      recordType: TXT\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.Record(\"aaaa\", {\n    ownerName: \"aaaa\",\n    recordDatas: [\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    recordType: \"AAAA\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.Record(\"aaaa\",\n    owner_name=\"aaaa\",\n    record_datas=[\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    record_type=\"AAAA\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.Record(\"aaaa\", new()\n    {\n        OwnerName = \"aaaa\",\n        RecordDatas = new[]\n        {\n            \"2001:db8:85a3:0:0:8a2e:370:7334\",\n        },\n        RecordType = \"AAAA\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"aaaa\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"aaaa\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7334\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"AAAA\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new Record(\"aaaa\", RecordArgs.builder()        \n            .ownerName(\"aaaa\")\n            .recordDatas(\"2001:db8:85a3:0:0:8a2e:370:7334\")\n            .recordType(\"AAAA\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:Record\n    properties:\n      ownerName: aaaa\n      recordDatas:\n        - 2001:db8:85a3:0:0:8a2e:370:7334\n      recordType: AAAA\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type SRV (33)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst srv = new ultradns.Record(\"srv\", {\n    ownerName: \"srv\",\n    recordDatas: [\"5 6 7 example.com.\"],\n    recordType: \"33\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsrv = ultradns.Record(\"srv\",\n    owner_name=\"srv\",\n    record_datas=[\"5 6 7 example.com.\"],\n    record_type=\"33\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var srv = new Ultradns.Record(\"srv\", new()\n    {\n        OwnerName = \"srv\",\n        RecordDatas = new[]\n        {\n            \"5 6 7 example.com.\",\n        },\n        RecordType = \"33\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"srv\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"srv\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5 6 7 example.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"33\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var srv = new Record(\"srv\", RecordArgs.builder()        \n            .ownerName(\"srv\")\n            .recordDatas(\"5 6 7 example.com.\")\n            .recordType(\"33\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  srv:\n    type: ultradns:Record\n    properties:\n      ownerName: srv\n      recordDatas:\n        - 5 6 7 example.com.\n      recordType: 33\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type SSHFP (44)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sshfp = new ultradns.Record(\"sshfp\", {\n    ownerName: \"sshfp\",\n    recordDatas: [\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"],\n    recordType: \"SSHFP\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsshfp = ultradns.Record(\"sshfp\",\n    owner_name=\"sshfp\",\n    record_datas=[\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"],\n    record_type=\"SSHFP\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshfp = new Ultradns.Record(\"sshfp\", new()\n    {\n        OwnerName = \"sshfp\",\n        RecordDatas = new[]\n        {\n            \"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\",\n        },\n        RecordType = \"SSHFP\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"sshfp\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"sshfp\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"SSHFP\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sshfp = new Record(\"sshfp\", RecordArgs.builder()        \n            .ownerName(\"sshfp\")\n            .recordDatas(\"1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\")\n            .recordType(\"SSHFP\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sshfp:\n    type: ultradns:Record\n    properties:\n      ownerName: sshfp\n      recordDatas:\n        - 1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37\n      recordType: SSHFP\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create DNS record of type APEXALIAS (65282)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst apex = new ultradns.Record(\"apex\", {\n    ownerName: \"example.com.\",\n    recordDatas: [\"sample.com.\"],\n    recordType: \"APEXALIAS\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\napex = ultradns.Record(\"apex\",\n    owner_name=\"example.com.\",\n    record_datas=[\"sample.com.\"],\n    record_type=\"APEXALIAS\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apex = new Ultradns.Record(\"apex\", new()\n    {\n        OwnerName = \"example.com.\",\n        RecordDatas = new[]\n        {\n            \"sample.com.\",\n        },\n        RecordType = \"APEXALIAS\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewRecord(ctx, \"apex\", \u0026ultradns.RecordArgs{\n\t\t\tOwnerName: pulumi.String(\"example.com.\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sample.com.\"),\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"APEXALIAS\"),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Record;\nimport com.pulumi.ultradns.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apex = new Record(\"apex\", RecordArgs.builder()        \n            .ownerName(\"example.com.\")\n            .recordDatas(\"sample.com.\")\n            .recordType(\"APEXALIAS\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  apex:\n    type: ultradns:Record\n    properties:\n      ownerName: example.com.\n      recordDatas:\n        - sample.com.\n      recordType: APEXALIAS\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRecords can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type as well as the corresponding number as shown in the example below. Example\n\n```sh\n $ pulumi import ultradns:index/record:Record example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "inputProperties": {
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ownerName",
                "recordDatas",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Record resources.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"])\u003cbr/\u003e\nAdditionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.\u003cbr/\u003e\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/sbPool:SbPool": {
            "description": "Use this resource to manage SiteBacker (SB) pool records in UltraDNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create SB pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sbPool = new ultradns.SbPool(\"a\", {\n    actOnProbes: true,\n    backupRecords: [\n        {\n            failoverDelay: 1,\n            rdata: \"192.168.1.3\",\n        },\n        {\n            failoverDelay: 1,\n            rdata: \"192.168.1.4\",\n        },\n    ],\n    failureThreshold: 2,\n    maxActive: 1,\n    maxServed: 1,\n    order: \"ROUND_ROBIN\",\n    ownerName: \"a\",\n    poolDescription: \"SB Pool Resource of Type A\",\n    rdataInfos: [\n        {\n            failoverDelay: 2,\n            priority: 2,\n            rdata: \"192.168.1.1\",\n            runProbes: true,\n            state: \"ACTIVE\",\n            threshold: 1,\n        },\n        {\n            failoverDelay: 1,\n            priority: 1,\n            rdata: \"192.168.1.2\",\n            runProbes: false,\n            state: \"NORMAL\",\n            threshold: 1,\n        },\n    ],\n    recordType: \"A\",\n    runProbes: true,\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsb_pool = ultradns.SbPool(\"sbPool\",\n    act_on_probes=True,\n    backup_records=[\n        ultradns.SbPoolBackupRecordArgs(\n            failover_delay=1,\n            rdata=\"192.168.1.3\",\n        ),\n        ultradns.SbPoolBackupRecordArgs(\n            failover_delay=1,\n            rdata=\"192.168.1.4\",\n        ),\n    ],\n    failure_threshold=2,\n    max_active=1,\n    max_served=1,\n    order=\"ROUND_ROBIN\",\n    owner_name=\"a\",\n    pool_description=\"SB Pool Resource of Type A\",\n    rdata_infos=[\n        ultradns.SbPoolRdataInfoArgs(\n            failover_delay=2,\n            priority=2,\n            rdata=\"192.168.1.1\",\n            run_probes=True,\n            state=\"ACTIVE\",\n            threshold=1,\n        ),\n        ultradns.SbPoolRdataInfoArgs(\n            failover_delay=1,\n            priority=1,\n            rdata=\"192.168.1.2\",\n            run_probes=False,\n            state=\"NORMAL\",\n            threshold=1,\n        ),\n    ],\n    record_type=\"A\",\n    run_probes=True,\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sbPool = new Ultradns.SbPool(\"sbPool\", new()\n    {\n        ActOnProbes = true,\n        BackupRecords = new[]\n        {\n            new Ultradns.Inputs.SbPoolBackupRecordArgs\n            {\n                FailoverDelay = 1,\n                Rdata = \"192.168.1.3\",\n            },\n            new Ultradns.Inputs.SbPoolBackupRecordArgs\n            {\n                FailoverDelay = 1,\n                Rdata = \"192.168.1.4\",\n            },\n        },\n        FailureThreshold = 2,\n        MaxActive = 1,\n        MaxServed = 1,\n        Order = \"ROUND_ROBIN\",\n        OwnerName = \"a\",\n        PoolDescription = \"SB Pool Resource of Type A\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.SbPoolRdataInfoArgs\n            {\n                FailoverDelay = 2,\n                Priority = 2,\n                Rdata = \"192.168.1.1\",\n                RunProbes = true,\n                State = \"ACTIVE\",\n                Threshold = 1,\n            },\n            new Ultradns.Inputs.SbPoolRdataInfoArgs\n            {\n                FailoverDelay = 1,\n                Priority = 1,\n                Rdata = \"192.168.1.2\",\n                RunProbes = false,\n                State = \"NORMAL\",\n                Threshold = 1,\n            },\n        },\n        RecordType = \"A\",\n        RunProbes = true,\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewSbPool(ctx, \"sbPool\", \u0026ultradns.SbPoolArgs{\n\t\t\tActOnProbes: pulumi.Bool(true),\n\t\t\tBackupRecords: SbPoolBackupRecordArray{\n\t\t\t\t\u0026SbPoolBackupRecordArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(1),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.3\"),\n\t\t\t\t},\n\t\t\t\t\u0026SbPoolBackupRecordArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(1),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.4\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFailureThreshold: pulumi.Int(2),\n\t\t\tMaxActive:        pulumi.Int(1),\n\t\t\tMaxServed:        pulumi.Int(1),\n\t\t\tOrder:            pulumi.String(\"ROUND_ROBIN\"),\n\t\t\tOwnerName:        pulumi.String(\"a\"),\n\t\t\tPoolDescription:  pulumi.String(\"SB Pool Resource of Type A\"),\n\t\t\tRdataInfos: SbPoolRdataInfoArray{\n\t\t\t\t\u0026SbPoolRdataInfoArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(2),\n\t\t\t\t\tPriority:      pulumi.Int(2),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.1\"),\n\t\t\t\t\tRunProbes:     pulumi.Bool(true),\n\t\t\t\t\tState:         pulumi.String(\"ACTIVE\"),\n\t\t\t\t\tThreshold:     pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026SbPoolRdataInfoArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(1),\n\t\t\t\t\tPriority:      pulumi.Int(1),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.2\"),\n\t\t\t\t\tRunProbes:     pulumi.Bool(false),\n\t\t\t\t\tState:         pulumi.String(\"NORMAL\"),\n\t\t\t\t\tThreshold:     pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"A\"),\n\t\t\tRunProbes:  pulumi.Bool(true),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.SbPool;\nimport com.pulumi.ultradns.SbPoolArgs;\nimport com.pulumi.ultradns.inputs.SbPoolBackupRecordArgs;\nimport com.pulumi.ultradns.inputs.SbPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sbPool = new SbPool(\"sbPool\", SbPoolArgs.builder()        \n            .actOnProbes(true)\n            .backupRecords(            \n                SbPoolBackupRecordArgs.builder()\n                    .failoverDelay(1)\n                    .rdata(\"192.168.1.3\")\n                    .build(),\n                SbPoolBackupRecordArgs.builder()\n                    .failoverDelay(1)\n                    .rdata(\"192.168.1.4\")\n                    .build())\n            .failureThreshold(2)\n            .maxActive(1)\n            .maxServed(1)\n            .order(\"ROUND_ROBIN\")\n            .ownerName(\"a\")\n            .poolDescription(\"SB Pool Resource of Type A\")\n            .rdataInfos(            \n                SbPoolRdataInfoArgs.builder()\n                    .failoverDelay(2)\n                    .priority(2)\n                    .rdata(\"192.168.1.1\")\n                    .runProbes(true)\n                    .state(\"ACTIVE\")\n                    .threshold(1)\n                    .build(),\n                SbPoolRdataInfoArgs.builder()\n                    .failoverDelay(1)\n                    .priority(1)\n                    .rdata(\"192.168.1.2\")\n                    .runProbes(false)\n                    .state(\"NORMAL\")\n                    .threshold(1)\n                    .build())\n            .recordType(\"A\")\n            .runProbes(true)\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sbPool:\n    type: ultradns:SbPool\n    properties:\n      actOnProbes: true\n      backupRecords:\n        - failoverDelay: 1\n          rdata: 192.168.1.3\n        - failoverDelay: 1\n          rdata: 192.168.1.4\n      failureThreshold: 2\n      maxActive: 1\n      maxServed: 1\n      order: ROUND_ROBIN\n      ownerName: a\n      poolDescription: SB Pool Resource of Type A\n      rdataInfos:\n        - failoverDelay: 2\n          priority: 2\n          rdata: 192.168.1.1\n          runProbes: true\n          state: ACTIVE\n          threshold: 1\n        - failoverDelay: 1\n          priority: 1\n          rdata: 192.168.1.2\n          runProbes: false\n          state: NORMAL\n          threshold: 1\n      recordType: A\n      runProbes: true\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSiteBacker (SB) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/sbPool:SbPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "actOnProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                },
                "backupRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SbPoolBackupRecord:SbPoolBackupRecord"
                    },
                    "description": "(Block Set) List of nested blocks describing the information of backup records for the SiteBacker pool. Specifies the records to be served if all other records fail. There can be one or more A records used as backup records, or a single CNAME record. The structure of this block is described below.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                },
                "maxActive": {
                    "type": "integer",
                    "description": "(Integer) Specifies the maximum number of active servers in a pool and determines when SiteBacker takes backup servers offline.\u003cbr/\u003e\nFor example, consider a pool with six servers. Setting Max Active to 4 means SiteBacker takes two servers offline and sends the four active records in the answer. Default value set to 1.\n"
                },
                "maxServed": {
                    "type": "integer",
                    "description": "(Integer) Determines the number of record answers for each query. This is typically All Active records, or a subset of Max Active. Default value set to the value of `max_active`.\n"
                },
                "order": {
                    "type": "string",
                    "description": "(String) Indicates the order of the records returned by the resolver for the SiteBacker pool. Valid values are `FIXED`, `RANDOM`, and `ROUND_ROBIN`. Default value set to `ROUND_ROBIN`.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the SiteBacker (SB) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SbPoolRdataInfo:SbPoolRdataInfo"
                    },
                    "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n"
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "maxServed",
                "ownerName",
                "rdataInfos",
                "recordType",
                "status",
                "zoneName"
            ],
            "inputProperties": {
                "actOnProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                },
                "backupRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SbPoolBackupRecord:SbPoolBackupRecord"
                    },
                    "description": "(Block Set) List of nested blocks describing the information of backup records for the SiteBacker pool. Specifies the records to be served if all other records fail. There can be one or more A records used as backup records, or a single CNAME record. The structure of this block is described below.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                },
                "maxActive": {
                    "type": "integer",
                    "description": "(Integer) Specifies the maximum number of active servers in a pool and determines when SiteBacker takes backup servers offline.\u003cbr/\u003e\nFor example, consider a pool with six servers. Setting Max Active to 4 means SiteBacker takes two servers offline and sends the four active records in the answer. Default value set to 1.\n"
                },
                "maxServed": {
                    "type": "integer",
                    "description": "(Integer) Determines the number of record answers for each query. This is typically All Active records, or a subset of Max Active. Default value set to the value of `max_active`.\n"
                },
                "order": {
                    "type": "string",
                    "description": "(String) Indicates the order of the records returned by the resolver for the SiteBacker pool. Valid values are `FIXED`, `RANDOM`, and `ROUND_ROBIN`. Default value set to `ROUND_ROBIN`.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the SiteBacker (SB) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SbPoolRdataInfo:SbPoolRdataInfo"
                    },
                    "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n",
                    "willReplaceOnChanges": true
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ownerName",
                "rdataInfos",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SbPool resources.\n",
                "properties": {
                    "actOnProbes": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                    },
                    "backupRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/SbPoolBackupRecord:SbPoolBackupRecord"
                        },
                        "description": "(Block Set) List of nested blocks describing the information of backup records for the SiteBacker pool. Specifies the records to be served if all other records fail. There can be one or more A records used as backup records, or a single CNAME record. The structure of this block is described below.\n"
                    },
                    "failureThreshold": {
                        "type": "integer",
                        "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                    },
                    "maxActive": {
                        "type": "integer",
                        "description": "(Integer) Specifies the maximum number of active servers in a pool and determines when SiteBacker takes backup servers offline.\u003cbr/\u003e\nFor example, consider a pool with six servers. Setting Max Active to 4 means SiteBacker takes two servers offline and sends the four active records in the answer. Default value set to 1.\n"
                    },
                    "maxServed": {
                        "type": "integer",
                        "description": "(Integer) Determines the number of record answers for each query. This is typically All Active records, or a subset of Max Active. Default value set to the value of `max_active`.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "(String) Indicates the order of the records returned by the resolver for the SiteBacker pool. Valid values are `FIXED`, `RANDOM`, and `ROUND_ROBIN`. Default value set to `ROUND_ROBIN`.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(String) An optional description of the SiteBacker (SB) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/SbPoolRdataInfo:SbPoolRdataInfo"
                        },
                        "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n",
                        "willReplaceOnChanges": true
                    },
                    "runProbes": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/sfPool:SfPool": {
            "description": "Use this resource to manage Simple Monitor/Failover (SF) pool records in UltraDNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create SF pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sfPool = new ultradns.SfPool(\"a\", {\n    backupRecord: {\n        description: \"Backup record\",\n        rdata: \"192.1.1.4\",\n    },\n    liveRecordDescription: \"Maintenance\",\n    liveRecordState: \"NOT_FORCED\",\n    monitor: {\n        method: \"GET\",\n        url: \"https://example.com\",\n    },\n    ownerName: \"a\",\n    poolDescription: \"SF Pool Resource of Type A\",\n    recordDatas: [\"192.1.1.3\"],\n    recordType: \"A\",\n    regionFailureSensitivity: \"HIGH\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsf_pool = ultradns.SfPool(\"sfPool\",\n    backup_record=ultradns.SfPoolBackupRecordArgs(\n        description=\"Backup record\",\n        rdata=\"192.1.1.4\",\n    ),\n    live_record_description=\"Maintenance\",\n    live_record_state=\"NOT_FORCED\",\n    monitor=ultradns.SfPoolMonitorArgs(\n        method=\"GET\",\n        url=\"https://example.com\",\n    ),\n    owner_name=\"a\",\n    pool_description=\"SF Pool Resource of Type A\",\n    record_datas=[\"192.1.1.3\"],\n    record_type=\"A\",\n    region_failure_sensitivity=\"HIGH\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sfPool = new Ultradns.SfPool(\"sfPool\", new()\n    {\n        BackupRecord = new Ultradns.Inputs.SfPoolBackupRecordArgs\n        {\n            Description = \"Backup record\",\n            Rdata = \"192.1.1.4\",\n        },\n        LiveRecordDescription = \"Maintenance\",\n        LiveRecordState = \"NOT_FORCED\",\n        Monitor = new Ultradns.Inputs.SfPoolMonitorArgs\n        {\n            Method = \"GET\",\n            Url = \"https://example.com\",\n        },\n        OwnerName = \"a\",\n        PoolDescription = \"SF Pool Resource of Type A\",\n        RecordDatas = new[]\n        {\n            \"192.1.1.3\",\n        },\n        RecordType = \"A\",\n        RegionFailureSensitivity = \"HIGH\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewSfPool(ctx, \"sfPool\", \u0026ultradns.SfPoolArgs{\n\t\t\tBackupRecord: \u0026SfPoolBackupRecordArgs{\n\t\t\t\tDescription: pulumi.String(\"Backup record\"),\n\t\t\t\tRdata:       pulumi.String(\"192.1.1.4\"),\n\t\t\t},\n\t\t\tLiveRecordDescription: pulumi.String(\"Maintenance\"),\n\t\t\tLiveRecordState:       pulumi.String(\"NOT_FORCED\"),\n\t\t\tMonitor: \u0026SfPoolMonitorArgs{\n\t\t\t\tMethod: pulumi.String(\"GET\"),\n\t\t\t\tUrl:    pulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tOwnerName:       pulumi.String(\"a\"),\n\t\t\tPoolDescription: pulumi.String(\"SF Pool Resource of Type A\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.1.1.3\"),\n\t\t\t},\n\t\t\tRecordType:               pulumi.String(\"A\"),\n\t\t\tRegionFailureSensitivity: pulumi.String(\"HIGH\"),\n\t\t\tTtl:                      pulumi.Int(120),\n\t\t\tZoneName:                 pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.SfPool;\nimport com.pulumi.ultradns.SfPoolArgs;\nimport com.pulumi.ultradns.inputs.SfPoolBackupRecordArgs;\nimport com.pulumi.ultradns.inputs.SfPoolMonitorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sfPool = new SfPool(\"sfPool\", SfPoolArgs.builder()        \n            .backupRecord(SfPoolBackupRecordArgs.builder()\n                .description(\"Backup record\")\n                .rdata(\"192.1.1.4\")\n                .build())\n            .liveRecordDescription(\"Maintenance\")\n            .liveRecordState(\"NOT_FORCED\")\n            .monitor(SfPoolMonitorArgs.builder()\n                .method(\"GET\")\n                .url(\"https://example.com\")\n                .build())\n            .ownerName(\"a\")\n            .poolDescription(\"SF Pool Resource of Type A\")\n            .recordDatas(\"192.1.1.3\")\n            .recordType(\"A\")\n            .regionFailureSensitivity(\"HIGH\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sfPool:\n    type: ultradns:SfPool\n    properties:\n      backupRecord:\n        description: Backup record\n        rdata: 192.1.1.4\n      liveRecordDescription: Maintenance\n      liveRecordState: NOT_FORCED\n      monitor:\n        method: GET\n        url: https://example.com\n      ownerName: a\n      poolDescription: SF Pool Resource of Type A\n      recordDatas:\n        - 192.1.1.3\n      recordType: A\n      regionFailureSensitivity: HIGH\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create SF pool record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.SfPool(\"aaaa\", {\n    backupRecord: {\n        description: \"Backup record\",\n        rdata: \"2001:db8:85a3:0:0:8a2e:370:7324\",\n    },\n    monitor: {\n        method: \"POST\",\n        url: \"https://example.com\",\n    },\n    ownerName: \"aaaa\",\n    recordDatas: [\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    recordType: \"AAAA\",\n    regionFailureSensitivity: \"LOW\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.SfPool(\"aaaa\",\n    backup_record=ultradns.SfPoolBackupRecordArgs(\n        description=\"Backup record\",\n        rdata=\"2001:db8:85a3:0:0:8a2e:370:7324\",\n    ),\n    monitor=ultradns.SfPoolMonitorArgs(\n        method=\"POST\",\n        url=\"https://example.com\",\n    ),\n    owner_name=\"aaaa\",\n    record_datas=[\"2001:db8:85a3:0:0:8a2e:370:7334\"],\n    record_type=\"AAAA\",\n    region_failure_sensitivity=\"LOW\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.SfPool(\"aaaa\", new()\n    {\n        BackupRecord = new Ultradns.Inputs.SfPoolBackupRecordArgs\n        {\n            Description = \"Backup record\",\n            Rdata = \"2001:db8:85a3:0:0:8a2e:370:7324\",\n        },\n        Monitor = new Ultradns.Inputs.SfPoolMonitorArgs\n        {\n            Method = \"POST\",\n            Url = \"https://example.com\",\n        },\n        OwnerName = \"aaaa\",\n        RecordDatas = new[]\n        {\n            \"2001:db8:85a3:0:0:8a2e:370:7334\",\n        },\n        RecordType = \"AAAA\",\n        RegionFailureSensitivity = \"LOW\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewSfPool(ctx, \"aaaa\", \u0026ultradns.SfPoolArgs{\n\t\t\tBackupRecord: \u0026SfPoolBackupRecordArgs{\n\t\t\t\tDescription: pulumi.String(\"Backup record\"),\n\t\t\t\tRdata:       pulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7324\"),\n\t\t\t},\n\t\t\tMonitor: \u0026SfPoolMonitorArgs{\n\t\t\t\tMethod: pulumi.String(\"POST\"),\n\t\t\t\tUrl:    pulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"aaaa\"),\n\t\t\tRecordDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7334\"),\n\t\t\t},\n\t\t\tRecordType:               pulumi.String(\"AAAA\"),\n\t\t\tRegionFailureSensitivity: pulumi.String(\"LOW\"),\n\t\t\tTtl:                      pulumi.Int(120),\n\t\t\tZoneName:                 pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.SfPool;\nimport com.pulumi.ultradns.SfPoolArgs;\nimport com.pulumi.ultradns.inputs.SfPoolBackupRecordArgs;\nimport com.pulumi.ultradns.inputs.SfPoolMonitorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new SfPool(\"aaaa\", SfPoolArgs.builder()        \n            .backupRecord(SfPoolBackupRecordArgs.builder()\n                .description(\"Backup record\")\n                .rdata(\"2001:db8:85a3:0:0:8a2e:370:7324\")\n                .build())\n            .monitor(SfPoolMonitorArgs.builder()\n                .method(\"POST\")\n                .url(\"https://example.com\")\n                .build())\n            .ownerName(\"aaaa\")\n            .recordDatas(\"2001:db8:85a3:0:0:8a2e:370:7334\")\n            .recordType(\"AAAA\")\n            .regionFailureSensitivity(\"LOW\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:SfPool\n    properties:\n      backupRecord:\n        description: Backup record\n        rdata: 2001:db8:85a3:0:0:8a2e:370:7324\n      monitor:\n        method: POST\n        url: https://example.com\n      ownerName: aaaa\n      recordDatas:\n        - 2001:db8:85a3:0:0:8a2e:370:7334\n      recordType: AAAA\n      regionFailureSensitivity: LOW\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSimple Monitor/Failover (SF) pool records can be imported by combining their `owner_name`, `zone_name` and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type as well as the corresponding number as shown in the example below. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/sfPool:SfPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "backupRecord": {
                    "$ref": "#/types/ultradns:index/SfPoolBackupRecord:SfPoolBackupRecord",
                    "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                },
                "liveRecordDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the live record.\n"
                },
                "liveRecordState": {
                    "type": "string",
                    "description": "(String) Whether or not the live record is currently active. Valid values are:\u003c/br\u003e \n`FORCED_INACTIVE` – the backup record should always be returned by a DNS query.\u003c/br\u003e\n`NOT_FORCED` – the monitor should determine if the live record or the backup record is returned by a DNS query.\n"
                },
                "monitor": {
                    "$ref": "#/types/ultradns:index/SfPoolMonitor:SfPoolMonitor",
                    "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Simple Failover field.\n"
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                },
                "regionFailureSensitivity": {
                    "type": "string",
                    "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, `HIGH`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) (String) Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK` – Live record is being served.\u003c/br\u003e\n`CRITICAL` – The backup record is being served due to the monitor detecting a failure.\u003c/br\u003e\n`MANUAL` – The backup record is being served due to user forcing the live record to be inactive.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "monitor",
                "ownerName",
                "recordDatas",
                "recordType",
                "regionFailureSensitivity",
                "status",
                "zoneName"
            ],
            "inputProperties": {
                "backupRecord": {
                    "$ref": "#/types/ultradns:index/SfPoolBackupRecord:SfPoolBackupRecord",
                    "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                },
                "liveRecordDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the live record.\n"
                },
                "liveRecordState": {
                    "type": "string",
                    "description": "(String) Whether or not the live record is currently active. Valid values are:\u003c/br\u003e \n`FORCED_INACTIVE` – the backup record should always be returned by a DNS query.\u003c/br\u003e\n`NOT_FORCED` – the monitor should determine if the live record or the backup record is returned by a DNS query.\n"
                },
                "monitor": {
                    "$ref": "#/types/ultradns:index/SfPoolMonitor:SfPoolMonitor",
                    "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Simple Failover field.\n"
                },
                "recordDatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                    "willReplaceOnChanges": true
                },
                "regionFailureSensitivity": {
                    "type": "string",
                    "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, `HIGH`.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "monitor",
                "ownerName",
                "recordDatas",
                "recordType",
                "regionFailureSensitivity",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SfPool resources.\n",
                "properties": {
                    "backupRecord": {
                        "$ref": "#/types/ultradns:index/SfPoolBackupRecord:SfPoolBackupRecord",
                        "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                    },
                    "liveRecordDescription": {
                        "type": "string",
                        "description": "(String) An optional description of the live record.\n"
                    },
                    "liveRecordState": {
                        "type": "string",
                        "description": "(String) Whether or not the live record is currently active. Valid values are:\u003c/br\u003e \n`FORCED_INACTIVE` – the backup record should always be returned by a DNS query.\u003c/br\u003e\n`NOT_FORCED` – the monitor should determine if the live record or the backup record is returned by a DNS query.\n"
                    },
                    "monitor": {
                        "$ref": "#/types/ultradns:index/SfPoolMonitor:SfPoolMonitor",
                        "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(String) An optional description of the Simple Failover field.\n"
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String List) The list of IPv4 or IPv6 addresses.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                        "willReplaceOnChanges": true
                    },
                    "regionFailureSensitivity": {
                        "type": "string",
                        "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, `HIGH`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String) Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK` – Live record is being served.\u003c/br\u003e\n`CRITICAL` – The backup record is being served due to the monitor detecting a failure.\u003c/br\u003e\n`MANUAL` – The backup record is being served due to user forcing the live record to be inactive.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/slbPool:SlbPool": {
            "description": "Use this resource to manage Simple Load Balancing (SLB) pool records in UltraDNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create SLB pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst slbPool = new ultradns.SlbPool(\"a\", {\n    allFailRecord: {\n        rdata: \"192.127.127.33\",\n    },\n    monitor: {\n        method: \"POST\",\n        url: \"https://example.com\",\n    },\n    ownerName: \"a\",\n    rdataInfos: [\n        {\n            description: \"first\",\n            probingEnabled: false,\n            rdata: \"192.201.127.33\",\n        },\n        {\n            description: \"second\",\n            probingEnabled: true,\n            rdata: \"192.168.1.2\",\n        },\n    ],\n    recordType: \"A\",\n    regionFailureSensitivity: \"HIGH\",\n    responseMethod: \"ROUND_ROBIN\",\n    servingPreference: \"AUTO_SELECT\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nslb_pool = ultradns.SlbPool(\"slbPool\",\n    all_fail_record=ultradns.SlbPoolAllFailRecordArgs(\n        rdata=\"192.127.127.33\",\n    ),\n    monitor=ultradns.SlbPoolMonitorArgs(\n        method=\"POST\",\n        url=\"https://example.com\",\n    ),\n    owner_name=\"a\",\n    rdata_infos=[\n        ultradns.SlbPoolRdataInfoArgs(\n            description=\"first\",\n            probing_enabled=False,\n            rdata=\"192.201.127.33\",\n        ),\n        ultradns.SlbPoolRdataInfoArgs(\n            description=\"second\",\n            probing_enabled=True,\n            rdata=\"192.168.1.2\",\n        ),\n    ],\n    record_type=\"A\",\n    region_failure_sensitivity=\"HIGH\",\n    response_method=\"ROUND_ROBIN\",\n    serving_preference=\"AUTO_SELECT\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slbPool = new Ultradns.SlbPool(\"slbPool\", new()\n    {\n        AllFailRecord = new Ultradns.Inputs.SlbPoolAllFailRecordArgs\n        {\n            Rdata = \"192.127.127.33\",\n        },\n        Monitor = new Ultradns.Inputs.SlbPoolMonitorArgs\n        {\n            Method = \"POST\",\n            Url = \"https://example.com\",\n        },\n        OwnerName = \"a\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.SlbPoolRdataInfoArgs\n            {\n                Description = \"first\",\n                ProbingEnabled = false,\n                Rdata = \"192.201.127.33\",\n            },\n            new Ultradns.Inputs.SlbPoolRdataInfoArgs\n            {\n                Description = \"second\",\n                ProbingEnabled = true,\n                Rdata = \"192.168.1.2\",\n            },\n        },\n        RecordType = \"A\",\n        RegionFailureSensitivity = \"HIGH\",\n        ResponseMethod = \"ROUND_ROBIN\",\n        ServingPreference = \"AUTO_SELECT\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewSlbPool(ctx, \"slbPool\", \u0026ultradns.SlbPoolArgs{\n\t\t\tAllFailRecord: \u0026SlbPoolAllFailRecordArgs{\n\t\t\t\tRdata: pulumi.String(\"192.127.127.33\"),\n\t\t\t},\n\t\t\tMonitor: \u0026SlbPoolMonitorArgs{\n\t\t\t\tMethod: pulumi.String(\"POST\"),\n\t\t\t\tUrl:    pulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"a\"),\n\t\t\tRdataInfos: SlbPoolRdataInfoArray{\n\t\t\t\t\u0026SlbPoolRdataInfoArgs{\n\t\t\t\t\tDescription:    pulumi.String(\"first\"),\n\t\t\t\t\tProbingEnabled: pulumi.Bool(false),\n\t\t\t\t\tRdata:          pulumi.String(\"192.201.127.33\"),\n\t\t\t\t},\n\t\t\t\t\u0026SlbPoolRdataInfoArgs{\n\t\t\t\t\tDescription:    pulumi.String(\"second\"),\n\t\t\t\t\tProbingEnabled: pulumi.Bool(true),\n\t\t\t\t\tRdata:          pulumi.String(\"192.168.1.2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType:               pulumi.String(\"A\"),\n\t\t\tRegionFailureSensitivity: pulumi.String(\"HIGH\"),\n\t\t\tResponseMethod:           pulumi.String(\"ROUND_ROBIN\"),\n\t\t\tServingPreference:        pulumi.String(\"AUTO_SELECT\"),\n\t\t\tTtl:                      pulumi.Int(120),\n\t\t\tZoneName:                 pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.SlbPool;\nimport com.pulumi.ultradns.SlbPoolArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolAllFailRecordArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolMonitorArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var slbPool = new SlbPool(\"slbPool\", SlbPoolArgs.builder()        \n            .allFailRecord(SlbPoolAllFailRecordArgs.builder()\n                .rdata(\"192.127.127.33\")\n                .build())\n            .monitor(SlbPoolMonitorArgs.builder()\n                .method(\"POST\")\n                .url(\"https://example.com\")\n                .build())\n            .ownerName(\"a\")\n            .rdataInfos(            \n                SlbPoolRdataInfoArgs.builder()\n                    .description(\"first\")\n                    .probingEnabled(false)\n                    .rdata(\"192.201.127.33\")\n                    .build(),\n                SlbPoolRdataInfoArgs.builder()\n                    .description(\"second\")\n                    .probingEnabled(true)\n                    .rdata(\"192.168.1.2\")\n                    .build())\n            .recordType(\"A\")\n            .regionFailureSensitivity(\"HIGH\")\n            .responseMethod(\"ROUND_ROBIN\")\n            .servingPreference(\"AUTO_SELECT\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  slbPool:\n    type: ultradns:SlbPool\n    properties:\n      allFailRecord:\n        rdata: 192.127.127.33\n      monitor:\n        method: POST\n        url: https://example.com\n      ownerName: a\n      rdataInfos:\n        - description: first\n          probingEnabled: false\n          rdata: 192.201.127.33\n        - description: second\n          probingEnabled: true\n          rdata: 192.168.1.2\n      recordType: A\n      regionFailureSensitivity: HIGH\n      responseMethod: ROUND_ROBIN\n      servingPreference: AUTO_SELECT\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% example %}}\n### Create SLB pool record of type AAAA (28)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst aaaa = new ultradns.SlbPool(\"aaaa\", {\n    allFailRecord: {\n        rdata: \"2001:db8:85a3:0:0:8a2e:370:7324\",\n    },\n    monitor: {\n        method: \"GET\",\n        url: \"https://example.com\",\n    },\n    ownerName: \"aaaa\",\n    rdataInfos: [{\n        description: \"first\",\n        probingEnabled: false,\n        rdata: \"2001:db8:85a3:0:0:8a2e:370:7334\",\n    }],\n    recordType: \"28\",\n    regionFailureSensitivity: \"LOW\",\n    responseMethod: \"ROUND_ROBIN\",\n    servingPreference: \"AUTO_SELECT\",\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\naaaa = ultradns.SlbPool(\"aaaa\",\n    all_fail_record=ultradns.SlbPoolAllFailRecordArgs(\n        rdata=\"2001:db8:85a3:0:0:8a2e:370:7324\",\n    ),\n    monitor=ultradns.SlbPoolMonitorArgs(\n        method=\"GET\",\n        url=\"https://example.com\",\n    ),\n    owner_name=\"aaaa\",\n    rdata_infos=[ultradns.SlbPoolRdataInfoArgs(\n        description=\"first\",\n        probing_enabled=False,\n        rdata=\"2001:db8:85a3:0:0:8a2e:370:7334\",\n    )],\n    record_type=\"28\",\n    region_failure_sensitivity=\"LOW\",\n    response_method=\"ROUND_ROBIN\",\n    serving_preference=\"AUTO_SELECT\",\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aaaa = new Ultradns.SlbPool(\"aaaa\", new()\n    {\n        AllFailRecord = new Ultradns.Inputs.SlbPoolAllFailRecordArgs\n        {\n            Rdata = \"2001:db8:85a3:0:0:8a2e:370:7324\",\n        },\n        Monitor = new Ultradns.Inputs.SlbPoolMonitorArgs\n        {\n            Method = \"GET\",\n            Url = \"https://example.com\",\n        },\n        OwnerName = \"aaaa\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.SlbPoolRdataInfoArgs\n            {\n                Description = \"first\",\n                ProbingEnabled = false,\n                Rdata = \"2001:db8:85a3:0:0:8a2e:370:7334\",\n            },\n        },\n        RecordType = \"28\",\n        RegionFailureSensitivity = \"LOW\",\n        ResponseMethod = \"ROUND_ROBIN\",\n        ServingPreference = \"AUTO_SELECT\",\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewSlbPool(ctx, \"aaaa\", \u0026ultradns.SlbPoolArgs{\n\t\t\tAllFailRecord: \u0026SlbPoolAllFailRecordArgs{\n\t\t\t\tRdata: pulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7324\"),\n\t\t\t},\n\t\t\tMonitor: \u0026SlbPoolMonitorArgs{\n\t\t\t\tMethod: pulumi.String(\"GET\"),\n\t\t\t\tUrl:    pulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tOwnerName: pulumi.String(\"aaaa\"),\n\t\t\tRdataInfos: SlbPoolRdataInfoArray{\n\t\t\t\t\u0026SlbPoolRdataInfoArgs{\n\t\t\t\t\tDescription:    pulumi.String(\"first\"),\n\t\t\t\t\tProbingEnabled: pulumi.Bool(false),\n\t\t\t\t\tRdata:          pulumi.String(\"2001:db8:85a3:0:0:8a2e:370:7334\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType:               pulumi.String(\"28\"),\n\t\t\tRegionFailureSensitivity: pulumi.String(\"LOW\"),\n\t\t\tResponseMethod:           pulumi.String(\"ROUND_ROBIN\"),\n\t\t\tServingPreference:        pulumi.String(\"AUTO_SELECT\"),\n\t\t\tTtl:                      pulumi.Int(120),\n\t\t\tZoneName:                 pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.SlbPool;\nimport com.pulumi.ultradns.SlbPoolArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolAllFailRecordArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolMonitorArgs;\nimport com.pulumi.ultradns.inputs.SlbPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aaaa = new SlbPool(\"aaaa\", SlbPoolArgs.builder()        \n            .allFailRecord(SlbPoolAllFailRecordArgs.builder()\n                .rdata(\"2001:db8:85a3:0:0:8a2e:370:7324\")\n                .build())\n            .monitor(SlbPoolMonitorArgs.builder()\n                .method(\"GET\")\n                .url(\"https://example.com\")\n                .build())\n            .ownerName(\"aaaa\")\n            .rdataInfos(SlbPoolRdataInfoArgs.builder()\n                .description(\"first\")\n                .probingEnabled(false)\n                .rdata(\"2001:db8:85a3:0:0:8a2e:370:7334\")\n                .build())\n            .recordType(\"28\")\n            .regionFailureSensitivity(\"LOW\")\n            .responseMethod(\"ROUND_ROBIN\")\n            .servingPreference(\"AUTO_SELECT\")\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaaa:\n    type: ultradns:SlbPool\n    properties:\n      allFailRecord:\n        rdata: 2001:db8:85a3:0:0:8a2e:370:7324\n      monitor:\n        method: GET\n        url: https://example.com\n      ownerName: aaaa\n      rdataInfos:\n        - description: first\n          probingEnabled: false\n          rdata: 2001:db8:85a3:0:0:8a2e:370:7334\n      recordType: 28\n      regionFailureSensitivity: LOW\n      responseMethod: ROUND_ROBIN\n      servingPreference: AUTO_SELECT\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSimple Load Balancing (SLB) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/slbPool:SlbPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "allFailRecord": {
                    "$ref": "#/types/ultradns:index/SlbPoolAllFailRecord:SlbPoolAllFailRecord",
                    "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                },
                "monitor": {
                    "$ref": "#/types/ultradns:index/SlbPoolMonitor:SlbPoolMonitor",
                    "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Simple Load Balancing (SLB) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SlbPoolRdataInfo:SlbPoolRdataInfo"
                    },
                    "description": "(Block Set, Max: 5) Nested block describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                },
                "regionFailureSensitivity": {
                    "type": "string",
                    "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, and `HIGH`.\n"
                },
                "responseMethod": {
                    "type": "string",
                    "description": "(String) The method used to select which record is returned from the primary record pool. Valid values are:\u003c/br\u003e\n`PRIORITY_HUNT` – The sequence of the records listed in the primary record pool determines the priority. The first record listed is the highest priority record. Once a record starts being served, it will always be served until the probe detects a failure on this record, or, the record is set to FORCED_INACTIVE.\u003c/br\u003e\n`RANDOM` – A random record is returned from the following set of primary records.\u003c/br\u003e\n`ROUND_ROBIN` -A record is returned in (a round robin fashion) rotation, based upon the priority of the following active set of records.\n"
                },
                "servingPreference": {
                    "type": "string",
                    "description": "(String) It determines if records will be selected from the Primary Records pool or from the All Fail Record. Valid values are:\u003c/br\u003e\n`AUTO_SELECT`: Serving method switches from serving Primary Records, to All Fail Record based upon probe results, and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_PRIMARY`: Only the Primary Records are served based upon the probe results and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_ALL_FAIL`: Only the All Fail Record will be served, ignoring the probe results and the Forced State of the Primary Records.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- Priority record(s) are being served.\u003c/br\u003e\n`WARNING` – One of the priority records is not being served due to the monitor detecting a failure, but there is still a priority record to be served.\u003c/br\u003e\n`CRITICAL` – The backup All Fail record is being served due to the monitor detecting a failure.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "allFailRecord",
                "monitor",
                "ownerName",
                "rdataInfos",
                "recordType",
                "regionFailureSensitivity",
                "responseMethod",
                "servingPreference",
                "status",
                "zoneName"
            ],
            "inputProperties": {
                "allFailRecord": {
                    "$ref": "#/types/ultradns:index/SlbPoolAllFailRecord:SlbPoolAllFailRecord",
                    "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                },
                "monitor": {
                    "$ref": "#/types/ultradns:index/SlbPoolMonitor:SlbPoolMonitor",
                    "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Simple Load Balancing (SLB) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/SlbPoolRdataInfo:SlbPoolRdataInfo"
                    },
                    "description": "(Block Set, Max: 5) Nested block describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                    "willReplaceOnChanges": true
                },
                "regionFailureSensitivity": {
                    "type": "string",
                    "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, and `HIGH`.\n"
                },
                "responseMethod": {
                    "type": "string",
                    "description": "(String) The method used to select which record is returned from the primary record pool. Valid values are:\u003c/br\u003e\n`PRIORITY_HUNT` – The sequence of the records listed in the primary record pool determines the priority. The first record listed is the highest priority record. Once a record starts being served, it will always be served until the probe detects a failure on this record, or, the record is set to FORCED_INACTIVE.\u003c/br\u003e\n`RANDOM` – A random record is returned from the following set of primary records.\u003c/br\u003e\n`ROUND_ROBIN` -A record is returned in (a round robin fashion) rotation, based upon the priority of the following active set of records.\n"
                },
                "servingPreference": {
                    "type": "string",
                    "description": "(String) It determines if records will be selected from the Primary Records pool or from the All Fail Record. Valid values are:\u003c/br\u003e\n`AUTO_SELECT`: Serving method switches from serving Primary Records, to All Fail Record based upon probe results, and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_PRIMARY`: Only the Primary Records are served based upon the probe results and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_ALL_FAIL`: Only the All Fail Record will be served, ignoring the probe results and the Forced State of the Primary Records.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allFailRecord",
                "monitor",
                "ownerName",
                "rdataInfos",
                "recordType",
                "regionFailureSensitivity",
                "responseMethod",
                "servingPreference",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SlbPool resources.\n",
                "properties": {
                    "allFailRecord": {
                        "$ref": "#/types/ultradns:index/SlbPoolAllFailRecord:SlbPoolAllFailRecord",
                        "description": "(Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                    },
                    "monitor": {
                        "$ref": "#/types/ultradns:index/SlbPoolMonitor:SlbPoolMonitor",
                        "description": "(Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(String) An optional description of the Simple Load Balancing (SLB) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/SlbPoolRdataInfo:SlbPoolRdataInfo"
                        },
                        "description": "(Block Set, Max: 5) Nested block describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n",
                        "willReplaceOnChanges": true
                    },
                    "regionFailureSensitivity": {
                        "type": "string",
                        "description": "(String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active. Valid values are `LOW`, and `HIGH`.\n"
                    },
                    "responseMethod": {
                        "type": "string",
                        "description": "(String) The method used to select which record is returned from the primary record pool. Valid values are:\u003c/br\u003e\n`PRIORITY_HUNT` – The sequence of the records listed in the primary record pool determines the priority. The first record listed is the highest priority record. Once a record starts being served, it will always be served until the probe detects a failure on this record, or, the record is set to FORCED_INACTIVE.\u003c/br\u003e\n`RANDOM` – A random record is returned from the following set of primary records.\u003c/br\u003e\n`ROUND_ROBIN` -A record is returned in (a round robin fashion) rotation, based upon the priority of the following active set of records.\n"
                    },
                    "servingPreference": {
                        "type": "string",
                        "description": "(String) It determines if records will be selected from the Primary Records pool or from the All Fail Record. Valid values are:\u003c/br\u003e\n`AUTO_SELECT`: Serving method switches from serving Primary Records, to All Fail Record based upon probe results, and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_PRIMARY`: Only the Primary Records are served based upon the probe results and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_ALL_FAIL`: Only the All Fail Record will be served, ignoring the probe results and the Forced State of the Primary Records.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- Priority record(s) are being served.\u003c/br\u003e\n`WARNING` – One of the priority records is not being served due to the monitor detecting a failure, but there is still a priority record to be served.\u003c/br\u003e\n`CRITICAL` – The backup All Fail record is being served due to the monitor detecting a failure.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/tcPool:TcPool": {
            "description": "Use this resource to manage Traffic Controller (TC) pool records in UltraDNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create TC pool record of type A (1)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst tcPool = new ultradns.TcPool(\"a\", {\n    actOnProbes: true,\n    backupRecord: {\n        failoverDelay: 1,\n        rdata: \"192.168.1.3\",\n    },\n    failureThreshold: 2,\n    maxToLb: 1,\n    ownerName: \"a\",\n    poolDescription: \"TC Pool Resource of Type A\",\n    rdataInfos: [\n        {\n            failoverDelay: 2,\n            priority: 2,\n            rdata: \"192.168.1.1\",\n            runProbes: true,\n            state: \"ACTIVE\",\n            threshold: 1,\n            weight: 4,\n        },\n        {\n            failoverDelay: 1,\n            priority: 1,\n            rdata: \"192.168.1.2\",\n            runProbes: false,\n            state: \"NORMAL\",\n            threshold: 1,\n        },\n    ],\n    recordType: \"A\",\n    runProbes: true,\n    ttl: 120,\n    zoneName: \"example.com.\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\ntc_pool = ultradns.TcPool(\"tcPool\",\n    act_on_probes=True,\n    backup_record=ultradns.TcPoolBackupRecordArgs(\n        failover_delay=1,\n        rdata=\"192.168.1.3\",\n    ),\n    failure_threshold=2,\n    max_to_lb=1,\n    owner_name=\"a\",\n    pool_description=\"TC Pool Resource of Type A\",\n    rdata_infos=[\n        ultradns.TcPoolRdataInfoArgs(\n            failover_delay=2,\n            priority=2,\n            rdata=\"192.168.1.1\",\n            run_probes=True,\n            state=\"ACTIVE\",\n            threshold=1,\n            weight=4,\n        ),\n        ultradns.TcPoolRdataInfoArgs(\n            failover_delay=1,\n            priority=1,\n            rdata=\"192.168.1.2\",\n            run_probes=False,\n            state=\"NORMAL\",\n            threshold=1,\n        ),\n    ],\n    record_type=\"A\",\n    run_probes=True,\n    ttl=120,\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tcPool = new Ultradns.TcPool(\"tcPool\", new()\n    {\n        ActOnProbes = true,\n        BackupRecord = new Ultradns.Inputs.TcPoolBackupRecordArgs\n        {\n            FailoverDelay = 1,\n            Rdata = \"192.168.1.3\",\n        },\n        FailureThreshold = 2,\n        MaxToLb = 1,\n        OwnerName = \"a\",\n        PoolDescription = \"TC Pool Resource of Type A\",\n        RdataInfos = new[]\n        {\n            new Ultradns.Inputs.TcPoolRdataInfoArgs\n            {\n                FailoverDelay = 2,\n                Priority = 2,\n                Rdata = \"192.168.1.1\",\n                RunProbes = true,\n                State = \"ACTIVE\",\n                Threshold = 1,\n                Weight = 4,\n            },\n            new Ultradns.Inputs.TcPoolRdataInfoArgs\n            {\n                FailoverDelay = 1,\n                Priority = 1,\n                Rdata = \"192.168.1.2\",\n                RunProbes = false,\n                State = \"NORMAL\",\n                Threshold = 1,\n            },\n        },\n        RecordType = \"A\",\n        RunProbes = true,\n        Ttl = 120,\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewTcPool(ctx, \"tcPool\", \u0026ultradns.TcPoolArgs{\n\t\t\tActOnProbes: pulumi.Bool(true),\n\t\t\tBackupRecord: \u0026TcPoolBackupRecordArgs{\n\t\t\t\tFailoverDelay: pulumi.Int(1),\n\t\t\t\tRdata:         pulumi.String(\"192.168.1.3\"),\n\t\t\t},\n\t\t\tFailureThreshold: pulumi.Int(2),\n\t\t\tMaxToLb:          pulumi.Int(1),\n\t\t\tOwnerName:        pulumi.String(\"a\"),\n\t\t\tPoolDescription:  pulumi.String(\"TC Pool Resource of Type A\"),\n\t\t\tRdataInfos: TcPoolRdataInfoArray{\n\t\t\t\t\u0026TcPoolRdataInfoArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(2),\n\t\t\t\t\tPriority:      pulumi.Int(2),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.1\"),\n\t\t\t\t\tRunProbes:     pulumi.Bool(true),\n\t\t\t\t\tState:         pulumi.String(\"ACTIVE\"),\n\t\t\t\t\tThreshold:     pulumi.Int(1),\n\t\t\t\t\tWeight:        pulumi.Int(4),\n\t\t\t\t},\n\t\t\t\t\u0026TcPoolRdataInfoArgs{\n\t\t\t\t\tFailoverDelay: pulumi.Int(1),\n\t\t\t\t\tPriority:      pulumi.Int(1),\n\t\t\t\t\tRdata:         pulumi.String(\"192.168.1.2\"),\n\t\t\t\t\tRunProbes:     pulumi.Bool(false),\n\t\t\t\t\tState:         pulumi.String(\"NORMAL\"),\n\t\t\t\t\tThreshold:     pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecordType: pulumi.String(\"A\"),\n\t\t\tRunProbes:  pulumi.Bool(true),\n\t\t\tTtl:        pulumi.Int(120),\n\t\t\tZoneName:   pulumi.String(\"example.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.TcPool;\nimport com.pulumi.ultradns.TcPoolArgs;\nimport com.pulumi.ultradns.inputs.TcPoolBackupRecordArgs;\nimport com.pulumi.ultradns.inputs.TcPoolRdataInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tcPool = new TcPool(\"tcPool\", TcPoolArgs.builder()        \n            .actOnProbes(true)\n            .backupRecord(TcPoolBackupRecordArgs.builder()\n                .failoverDelay(1)\n                .rdata(\"192.168.1.3\")\n                .build())\n            .failureThreshold(2)\n            .maxToLb(1)\n            .ownerName(\"a\")\n            .poolDescription(\"TC Pool Resource of Type A\")\n            .rdataInfos(            \n                TcPoolRdataInfoArgs.builder()\n                    .failoverDelay(2)\n                    .priority(2)\n                    .rdata(\"192.168.1.1\")\n                    .runProbes(true)\n                    .state(\"ACTIVE\")\n                    .threshold(1)\n                    .weight(4)\n                    .build(),\n                TcPoolRdataInfoArgs.builder()\n                    .failoverDelay(1)\n                    .priority(1)\n                    .rdata(\"192.168.1.2\")\n                    .runProbes(false)\n                    .state(\"NORMAL\")\n                    .threshold(1)\n                    .build())\n            .recordType(\"A\")\n            .runProbes(true)\n            .ttl(120)\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tcPool:\n    type: ultradns:TcPool\n    properties:\n      actOnProbes: true\n      backupRecord:\n        failoverDelay: 1\n        rdata: 192.168.1.3\n      failureThreshold: 2\n      maxToLb: 1\n      ownerName: a\n      poolDescription: TC Pool Resource of Type A\n      rdataInfos:\n        - failoverDelay: 2\n          priority: 2\n          rdata: 192.168.1.1\n          runProbes: true\n          state: ACTIVE\n          threshold: 1\n          weight: 4\n        - failoverDelay: 1\n          priority: 1\n          rdata: 192.168.1.2\n          runProbes: false\n          state: NORMAL\n          threshold: 1\n      recordType: A\n      runProbes: true\n      ttl: 120\n      zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTraffic Controller (TC) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.\u003cbr/\u003e Example `www.example.com.:example.com.:A (1)`. -\u003e For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform\n\n```sh\n $ pulumi import ultradns:index/tcPool:TcPool example \"www.example.com.:example.com.:A (1)\"\n```\n\n ",
            "properties": {
                "actOnProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                },
                "backupRecord": {
                    "$ref": "#/types/ultradns:index/TcPoolBackupRecord:TcPoolBackupRecord",
                    "description": "(Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                },
                "maxToLb": {
                    "type": "integer",
                    "description": "(Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Traffic Controller (TC) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/TcPoolRdataInfo:TcPoolRdataInfo"
                    },
                    "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n"
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                }
            },
            "required": [
                "ownerName",
                "rdataInfos",
                "recordType",
                "status",
                "zoneName"
            ],
            "inputProperties": {
                "actOnProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                },
                "backupRecord": {
                    "$ref": "#/types/ultradns:index/TcPoolBackupRecord:TcPoolBackupRecord",
                    "description": "(Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                },
                "maxToLb": {
                    "type": "integer",
                    "description": "(Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "poolDescription": {
                    "type": "string",
                    "description": "(String) An optional description of the Traffic Controller (TC) field.\n"
                },
                "rdataInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ultradns:index/TcPoolRdataInfo:TcPoolRdataInfo"
                    },
                    "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n",
                    "willReplaceOnChanges": true
                },
                "runProbes": {
                    "type": "boolean",
                    "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ownerName",
                "rdataInfos",
                "recordType",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TcPool resources.\n",
                "properties": {
                    "actOnProbes": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.\n"
                    },
                    "backupRecord": {
                        "$ref": "#/types/ultradns:index/TcPoolBackupRecord:TcPoolBackupRecord",
                        "description": "(Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.\n"
                    },
                    "failureThreshold": {
                        "type": "integer",
                        "description": "(Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\nValid value between 0 and the number of priority records in the pool.\n"
                    },
                    "maxToLb": {
                        "type": "integer",
                        "description": "(Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(String) An optional description of the Traffic Controller (TC) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/TcPoolRdataInfo:TcPoolRdataInfo"
                        },
                        "description": "(Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n",
                        "willReplaceOnChanges": true
                    },
                    "runProbes": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ultradns:index/zone:Zone": {
            "description": "Use this resource to manage zones in UltraDNS\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create Primary Zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst primary = new ultradns.Zone(\"primary\", {\n    accountName: \"account\",\n    primaryCreateInfo: {\n        createType: \"NEW\",\n        notifyAddresses: [\n            {\n                notifyAddress: \"192.168.1.3\",\n            },\n            {\n                notifyAddress: \"192.168.1.4\",\n            },\n        ],\n        restrictIps: [\n            {\n                singleIp: \"192.168.1.1\",\n            },\n            {\n                singleIp: \"192.168.1.2\",\n            },\n        ],\n        tsig: {\n            description: \"description\",\n            tsigAlgorithm: \"hmac-md5\",\n            tsigKeyName: \"example.com.0.325349282751.key.\",\n            tsigKeyValue: \"ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\",\n        },\n    },\n    type: \"PRIMARY\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nprimary = ultradns.Zone(\"primary\",\n    account_name=\"account\",\n    primary_create_info=ultradns.ZonePrimaryCreateInfoArgs(\n        create_type=\"NEW\",\n        notify_addresses=[\n            ultradns.ZonePrimaryCreateInfoNotifyAddressArgs(\n                notify_address=\"192.168.1.3\",\n            ),\n            ultradns.ZonePrimaryCreateInfoNotifyAddressArgs(\n                notify_address=\"192.168.1.4\",\n            ),\n        ],\n        restrict_ips=[\n            ultradns.ZonePrimaryCreateInfoRestrictIpArgs(\n                single_ip=\"192.168.1.1\",\n            ),\n            ultradns.ZonePrimaryCreateInfoRestrictIpArgs(\n                single_ip=\"192.168.1.2\",\n            ),\n        ],\n        tsig=ultradns.ZonePrimaryCreateInfoTsigArgs(\n            description=\"description\",\n            tsig_algorithm=\"hmac-md5\",\n            tsig_key_name=\"example.com.0.325349282751.key.\",\n            tsig_key_value=\"ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\",\n        ),\n    ),\n    type=\"PRIMARY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var primary = new Ultradns.Zone(\"primary\", new()\n    {\n        AccountName = \"account\",\n        PrimaryCreateInfo = new Ultradns.Inputs.ZonePrimaryCreateInfoArgs\n        {\n            CreateType = \"NEW\",\n            NotifyAddresses = new[]\n            {\n                new Ultradns.Inputs.ZonePrimaryCreateInfoNotifyAddressArgs\n                {\n                    NotifyAddress = \"192.168.1.3\",\n                },\n                new Ultradns.Inputs.ZonePrimaryCreateInfoNotifyAddressArgs\n                {\n                    NotifyAddress = \"192.168.1.4\",\n                },\n            },\n            RestrictIps = new[]\n            {\n                new Ultradns.Inputs.ZonePrimaryCreateInfoRestrictIpArgs\n                {\n                    SingleIp = \"192.168.1.1\",\n                },\n                new Ultradns.Inputs.ZonePrimaryCreateInfoRestrictIpArgs\n                {\n                    SingleIp = \"192.168.1.2\",\n                },\n            },\n            Tsig = new Ultradns.Inputs.ZonePrimaryCreateInfoTsigArgs\n            {\n                Description = \"description\",\n                TsigAlgorithm = \"hmac-md5\",\n                TsigKeyName = \"example.com.0.325349282751.key.\",\n                TsigKeyValue = \"ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\",\n            },\n        },\n        Type = \"PRIMARY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewZone(ctx, \"primary\", \u0026ultradns.ZoneArgs{\n\t\t\tAccountName: pulumi.String(\"account\"),\n\t\t\tPrimaryCreateInfo: \u0026ZonePrimaryCreateInfoArgs{\n\t\t\t\tCreateType: pulumi.String(\"NEW\"),\n\t\t\t\tNotifyAddresses: ZonePrimaryCreateInfoNotifyAddressArray{\n\t\t\t\t\t\u0026ZonePrimaryCreateInfoNotifyAddressArgs{\n\t\t\t\t\t\tNotifyAddress: pulumi.String(\"192.168.1.3\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ZonePrimaryCreateInfoNotifyAddressArgs{\n\t\t\t\t\t\tNotifyAddress: pulumi.String(\"192.168.1.4\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tRestrictIps: ZonePrimaryCreateInfoRestrictIpArray{\n\t\t\t\t\t\u0026ZonePrimaryCreateInfoRestrictIpArgs{\n\t\t\t\t\t\tSingleIp: pulumi.String(\"192.168.1.1\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ZonePrimaryCreateInfoRestrictIpArgs{\n\t\t\t\t\t\tSingleIp: pulumi.String(\"192.168.1.2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTsig: \u0026ZonePrimaryCreateInfoTsigArgs{\n\t\t\t\t\tDescription:   pulumi.String(\"description\"),\n\t\t\t\t\tTsigAlgorithm: pulumi.String(\"hmac-md5\"),\n\t\t\t\t\tTsigKeyName:   pulumi.String(\"example.com.0.325349282751.key.\"),\n\t\t\t\t\tTsigKeyValue:  pulumi.String(\"ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"PRIMARY\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Zone;\nimport com.pulumi.ultradns.ZoneArgs;\nimport com.pulumi.ultradns.inputs.ZonePrimaryCreateInfoArgs;\nimport com.pulumi.ultradns.inputs.ZonePrimaryCreateInfoTsigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var primary = new Zone(\"primary\", ZoneArgs.builder()        \n            .accountName(\"account\")\n            .primaryCreateInfo(ZonePrimaryCreateInfoArgs.builder()\n                .createType(\"NEW\")\n                .notifyAddresses(                \n                    ZonePrimaryCreateInfoNotifyAddressArgs.builder()\n                        .notifyAddress(\"192.168.1.3\")\n                        .build(),\n                    ZonePrimaryCreateInfoNotifyAddressArgs.builder()\n                        .notifyAddress(\"192.168.1.4\")\n                        .build())\n                .restrictIps(                \n                    ZonePrimaryCreateInfoRestrictIpArgs.builder()\n                        .singleIp(\"192.168.1.1\")\n                        .build(),\n                    ZonePrimaryCreateInfoRestrictIpArgs.builder()\n                        .singleIp(\"192.168.1.2\")\n                        .build())\n                .tsig(ZonePrimaryCreateInfoTsigArgs.builder()\n                    .description(\"description\")\n                    .tsigAlgorithm(\"hmac-md5\")\n                    .tsigKeyName(\"example.com.0.325349282751.key.\")\n                    .tsigKeyValue(\"ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\")\n                    .build())\n                .build())\n            .type(\"PRIMARY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  primary:\n    type: ultradns:Zone\n    properties:\n      accountName: account\n      primaryCreateInfo:\n        createType: NEW\n        notifyAddresses:\n          - notifyAddress: 192.168.1.3\n          - notifyAddress: 192.168.1.4\n        restrictIps:\n          - singleIp: 192.168.1.1\n          - singleIp: 192.168.1.2\n        tsig:\n          description: description\n          tsigAlgorithm: hmac-md5\n          tsigKeyName: example.com.0.325349282751.key.\n          tsigKeyValue: ZWFlY2U1MTBlRmM2Y0NGQ5MTlmYTdmZTE0Njc=\n      type: PRIMARY\n```\n{{% /example %}}\n{{% example %}}\n### Create Secondary Zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst secondary = new ultradns.Zone(\"secondary\", {\n    accountName: \"account\",\n    secondaryCreateInfo: {\n        notificationEmailAddress: \"test@example.com\",\n        primaryNameServer1: {\n            ip: \"192.168.1.1\",\n        },\n    },\n    type: \"SECONDARY\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nsecondary = ultradns.Zone(\"secondary\",\n    account_name=\"account\",\n    secondary_create_info=ultradns.ZoneSecondaryCreateInfoArgs(\n        notification_email_address=\"test@example.com\",\n        primary_name_server1=ultradns.ZoneSecondaryCreateInfoPrimaryNameServer1Args(\n            ip=\"192.168.1.1\",\n        ),\n    ),\n    type=\"SECONDARY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var secondary = new Ultradns.Zone(\"secondary\", new()\n    {\n        AccountName = \"account\",\n        SecondaryCreateInfo = new Ultradns.Inputs.ZoneSecondaryCreateInfoArgs\n        {\n            NotificationEmailAddress = \"test@example.com\",\n            PrimaryNameServer1 = new Ultradns.Inputs.ZoneSecondaryCreateInfoPrimaryNameServer1Args\n            {\n                Ip = \"192.168.1.1\",\n            },\n        },\n        Type = \"SECONDARY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewZone(ctx, \"secondary\", \u0026ultradns.ZoneArgs{\n\t\t\tAccountName: pulumi.String(\"account\"),\n\t\t\tSecondaryCreateInfo: \u0026ZoneSecondaryCreateInfoArgs{\n\t\t\t\tNotificationEmailAddress: pulumi.String(\"test@example.com\"),\n\t\t\t\tPrimaryNameServer1: \u0026ZoneSecondaryCreateInfoPrimaryNameServer1Args{\n\t\t\t\t\tIp: pulumi.String(\"192.168.1.1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"SECONDARY\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Zone;\nimport com.pulumi.ultradns.ZoneArgs;\nimport com.pulumi.ultradns.inputs.ZoneSecondaryCreateInfoArgs;\nimport com.pulumi.ultradns.inputs.ZoneSecondaryCreateInfoPrimaryNameServer1Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secondary = new Zone(\"secondary\", ZoneArgs.builder()        \n            .accountName(\"account\")\n            .secondaryCreateInfo(ZoneSecondaryCreateInfoArgs.builder()\n                .notificationEmailAddress(\"test@example.com\")\n                .primaryNameServer1(ZoneSecondaryCreateInfoPrimaryNameServer1Args.builder()\n                    .ip(\"192.168.1.1\")\n                    .build())\n                .build())\n            .type(\"SECONDARY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  secondary:\n    type: ultradns:Zone\n    properties:\n      accountName: account\n      secondaryCreateInfo:\n        notificationEmailAddress: test@example.com\n        primaryNameServer1:\n          ip: 192.168.1.1\n      type: SECONDARY\n```\n{{% /example %}}\n{{% example %}}\n### Create Alias Zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst alias = new ultradns.Zone(\"alias\", {\n    accountName: \"account\",\n    aliasCreateInfo: {\n        originalZoneName: \"ultradns.com.\",\n    },\n    type: \"ALIAS\",\n});\n```\n```python\nimport pulumi\nimport mark-bixler_ultradns as ultradns\n\nalias = ultradns.Zone(\"alias\",\n    account_name=\"account\",\n    alias_create_info=ultradns.ZoneAliasCreateInfoArgs(\n        original_zone_name=\"ultradns.com.\",\n    ),\n    type=\"ALIAS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = mark-bixler.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @alias = new Ultradns.Zone(\"alias\", new()\n    {\n        AccountName = \"account\",\n        AliasCreateInfo = new Ultradns.Inputs.ZoneAliasCreateInfoArgs\n        {\n            OriginalZoneName = \"ultradns.com.\",\n        },\n        Type = \"ALIAS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.NewZone(ctx, \"alias\", \u0026ultradns.ZoneArgs{\n\t\t\tAccountName: pulumi.String(\"account\"),\n\t\t\tAliasCreateInfo: \u0026ZoneAliasCreateInfoArgs{\n\t\t\t\tOriginalZoneName: pulumi.String(\"ultradns.com.\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"ALIAS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.Zone;\nimport com.pulumi.ultradns.ZoneArgs;\nimport com.pulumi.ultradns.inputs.ZoneAliasCreateInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alias = new Zone(\"alias\", ZoneArgs.builder()        \n            .accountName(\"account\")\n            .aliasCreateInfo(ZoneAliasCreateInfoArgs.builder()\n                .originalZoneName(\"ultradns.com.\")\n                .build())\n            .type(\"ALIAS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alias:\n    type: ultradns:Zone\n    properties:\n      accountName: account\n      aliasCreateInfo:\n        originalZoneName: ultradns.com.\n      type: ALIAS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZones can be imported using their name (must be a FQDN). Example\n\n```sh\n $ pulumi import ultradns:index/zone:Zone example \"example.com.\"\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "(String) \tName of the account. It must be provided, but it can also be sourced from the `ULTRADNS_ACCOUNT` environment variable.\n"
                },
                "aliasCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZoneAliasCreateInfo:ZoneAliasCreateInfo",
                    "description": "(Block Set, Max: 1)\nNested block describing the info of alias zone. The structure of this block is described below.\n"
                },
                "changeComment": {
                    "type": "string",
                    "description": "(String) This is used to provide comments on updates.\n"
                },
                "dnssecStatus": {
                    "type": "string",
                    "description": "(Computed) (String) Whether or not the zone is signed with DNSSEC. Valid values are `SIGNED` or `UNSIGNED`.\n"
                },
                "lastModifiedTime": {
                    "type": "string",
                    "description": "(Computed) (String) The last date and time the zone was modified, represented in ISO8601 format (`yyyy-MM-ddTHH:mmZ`).\u003cbr/\u003e\nExample: `2021-12-07T11:25Z`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "(Computed) (String) Name of the user that created the zone.\n"
                },
                "primaryCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfo:ZonePrimaryCreateInfo",
                    "description": "(Block Set, Max: 1) Nested block describing the info of primary zone. The structure of this block is described below.\n"
                },
                "registrarInfo": {
                    "$ref": "#/types/ultradns:index/ZoneRegistrarInfo:ZoneRegistrarInfo",
                    "description": "(Computed) (Block Set) Nested block describing information about the name server configuration for this zone. The structure of this block is described below.\n"
                },
                "resourceRecordCount": {
                    "type": "integer",
                    "description": "(Computed) (Integer) Number of records in the zone.\n"
                },
                "secondaryCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfo:ZoneSecondaryCreateInfo",
                    "description": "(Block Set, Max: 1)\nNested block describing the info of secondary zone. The structure of this block is described below.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) (String) Display the status of the zone.\n"
                },
                "transferStatusDetails": {
                    "$ref": "#/types/ultradns:index/ZoneTransferStatusDetails:ZoneTransferStatusDetails",
                    "description": "(Computed) (Block Set) Nested block describing the zone transfer details. The structure of this block is described below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(String) This is the type of zone. Valid values are `PRIMARY`, `SECONDARY` or `ALIAS`.\n"
                }
            },
            "required": [
                "dnssecStatus",
                "lastModifiedTime",
                "name",
                "owner",
                "registrarInfo",
                "resourceRecordCount",
                "status",
                "transferStatusDetails",
                "type"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "(String) \tName of the account. It must be provided, but it can also be sourced from the `ULTRADNS_ACCOUNT` environment variable.\n",
                    "willReplaceOnChanges": true
                },
                "aliasCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZoneAliasCreateInfo:ZoneAliasCreateInfo",
                    "description": "(Block Set, Max: 1)\nNested block describing the info of alias zone. The structure of this block is described below.\n"
                },
                "changeComment": {
                    "type": "string",
                    "description": "(String) This is used to provide comments on updates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) Name of the zone.\n",
                    "willReplaceOnChanges": true
                },
                "primaryCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfo:ZonePrimaryCreateInfo",
                    "description": "(Block Set, Max: 1) Nested block describing the info of primary zone. The structure of this block is described below.\n"
                },
                "registrarInfo": {
                    "$ref": "#/types/ultradns:index/ZoneRegistrarInfo:ZoneRegistrarInfo",
                    "description": "(Computed) (Block Set) Nested block describing information about the name server configuration for this zone. The structure of this block is described below.\n"
                },
                "secondaryCreateInfo": {
                    "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfo:ZoneSecondaryCreateInfo",
                    "description": "(Block Set, Max: 1)\nNested block describing the info of secondary zone. The structure of this block is described below.\n"
                },
                "transferStatusDetails": {
                    "$ref": "#/types/ultradns:index/ZoneTransferStatusDetails:ZoneTransferStatusDetails",
                    "description": "(Computed) (Block Set) Nested block describing the zone transfer details. The structure of this block is described below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(String) This is the type of zone. Valid values are `PRIMARY`, `SECONDARY` or `ALIAS`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Zone resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "(String) \tName of the account. It must be provided, but it can also be sourced from the `ULTRADNS_ACCOUNT` environment variable.\n",
                        "willReplaceOnChanges": true
                    },
                    "aliasCreateInfo": {
                        "$ref": "#/types/ultradns:index/ZoneAliasCreateInfo:ZoneAliasCreateInfo",
                        "description": "(Block Set, Max: 1)\nNested block describing the info of alias zone. The structure of this block is described below.\n"
                    },
                    "changeComment": {
                        "type": "string",
                        "description": "(String) This is used to provide comments on updates.\n"
                    },
                    "dnssecStatus": {
                        "type": "string",
                        "description": "(Computed) (String) Whether or not the zone is signed with DNSSEC. Valid values are `SIGNED` or `UNSIGNED`.\n"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "(Computed) (String) The last date and time the zone was modified, represented in ISO8601 format (`yyyy-MM-ddTHH:mmZ`).\u003cbr/\u003e\nExample: `2021-12-07T11:25Z`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "(Computed) (String) Name of the user that created the zone.\n"
                    },
                    "primaryCreateInfo": {
                        "$ref": "#/types/ultradns:index/ZonePrimaryCreateInfo:ZonePrimaryCreateInfo",
                        "description": "(Block Set, Max: 1) Nested block describing the info of primary zone. The structure of this block is described below.\n"
                    },
                    "registrarInfo": {
                        "$ref": "#/types/ultradns:index/ZoneRegistrarInfo:ZoneRegistrarInfo",
                        "description": "(Computed) (Block Set) Nested block describing information about the name server configuration for this zone. The structure of this block is described below.\n"
                    },
                    "resourceRecordCount": {
                        "type": "integer",
                        "description": "(Computed) (Integer) Number of records in the zone.\n"
                    },
                    "secondaryCreateInfo": {
                        "$ref": "#/types/ultradns:index/ZoneSecondaryCreateInfo:ZoneSecondaryCreateInfo",
                        "description": "(Block Set, Max: 1)\nNested block describing the info of secondary zone. The structure of this block is described below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String) Display the status of the zone.\n"
                    },
                    "transferStatusDetails": {
                        "$ref": "#/types/ultradns:index/ZoneTransferStatusDetails:ZoneTransferStatusDetails",
                        "description": "(Computed) (Block Set) Nested block describing the zone transfer details. The structure of this block is described below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) This is the type of zone. Valid values are `PRIMARY`, `SECONDARY` or `ALIAS`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "ultradns:index/getDirPool:getDirPool": {
            "description": "Use this data source to get detailed information of Directional (DIR) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst dirpool = pulumi.output(ultradns.getDirPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\ndirpool = ultradns.get_dir_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dirpool = Ultradns.GetDirPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupDirPool(ctx, \u0026GetDirPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetDirPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dirpool = UltradnsFunctions.getDirPool(GetDirPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dirpool:\n    Fn::Invoke:\n      Function: ultradns:getDirPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDirPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDirPool.\n",
                "properties": {
                    "conflictResolve": {
                        "type": "string",
                        "description": "(Computed) (String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreEcs": {
                        "type": "boolean",
                        "description": "(Computed) (Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.\u003c/br\u003e\n`false`= EDNSO data will be used for IP directional routing.\u003c/br\u003e\n`true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.\n"
                    },
                    "noResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getDirPoolNoResponse:getDirPoolNoResponse"
                        },
                        "description": "(Computed) (Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(Computed) (String) Allows for an additional description of the Directional (DIR) pool.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getDirPoolRdataInfo:getDirPoolRdataInfo"
                        },
                        "description": "(Computed) (Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "conflictResolve",
                    "ignoreEcs",
                    "noResponses",
                    "ownerName",
                    "poolDescription",
                    "rdataInfos",
                    "recordType",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getRdPool:getRdPool": {
            "description": "Use this data source to get detailed information of Resource Distribution (RD) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst rdpool = pulumi.output(ultradns.getRdPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nrdpool = ultradns.get_rd_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rdpool = Ultradns.GetRdPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupRdPool(ctx, \u0026GetRdPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetRdPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rdpool = UltradnsFunctions.getRdPool(GetRdPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  rdpool:\n    Fn::Invoke:\n      Function: ultradns:getRdPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRdPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as the well-known resource record type (A or AAAA) or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRdPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the RD pool.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "(Computed) (String) The order of the records will be returned in.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) (String List) The list of IPv4 or IPv6 addresses.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "order",
                    "ownerName",
                    "recordDatas",
                    "recordType",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getRecord:getRecord": {
            "description": "Use this data source to get detailed information of standard DNS records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst record = pulumi.output(ultradns.getRecord({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nrecord = ultradns.get_record(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var record = Ultradns.GetRecord.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupRecord(ctx, \u0026GetRecordArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var record = UltradnsFunctions.getRecord(GetRecordArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  record:\n    Fn::Invoke:\n      Function: ultradns:getRecord\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRecord.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type, between 1 and 65535.\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`NS (2)`\n`CNAME (5)`\n`PTR (12)`\n`MX (15)`\n`TXT (16)`\n`AAAA (28)`\n`SRV (33)`\n`SSHFP (44)`\n`APEXALIAS (65282)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRecord.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.\u003cbr/\u003e\nExample : For a SRV record, the format of data is [\"priority weight port target\"] ([\"2 2 523 example.com.\"]).\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordDatas",
                    "recordType",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getSbPool:getSbPool": {
            "description": "Use this data source to get detailed information of SiteBacker (SB) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sbpool = pulumi.output(ultradns.getSbPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nsbpool = ultradns.get_sb_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sbpool = Ultradns.GetSbPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupSbPool(ctx, \u0026GetSbPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetSbPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sbpool = UltradnsFunctions.getSbPool(GetSbPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sbpool:\n    Fn::Invoke:\n      Function: ultradns:getSbPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSbPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSbPool.\n",
                "properties": {
                    "actOnProbes": {
                        "type": "boolean",
                        "description": "(Computed) (Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run.\n"
                    },
                    "backupRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSbPoolBackupRecord:getSbPoolBackupRecord"
                        },
                        "description": "(Computed) (Block Set) List of nested blocks describing the information of backup records for the SiteBacker pool. Specifies the records to be served if all other records fail. There can be one or more A records used as backup records, or a single CNAME record. The structure of this block is described below.\n"
                    },
                    "failureThreshold": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\u003cbr/\u003e\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxActive": {
                        "type": "integer",
                        "description": "(Computed) (Integer) Specifies the maximum number of active servers in a pool and determines when SiteBacker takes backup servers offline.\u003cbr/\u003e\nFor example, consider a pool with six servers. Setting Max Active to 4 means SiteBacker takes two servers offline and sends the four active records in the answer.\n"
                    },
                    "maxServed": {
                        "type": "integer",
                        "description": "(Computed) (Integer) Determines the number of record answers for each query. This is typically All Active records, or a subset of Max Active.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "(Computed) (String) Indicates the order of the records returned by the resolver for the SiteBacker pool.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the SiteBacker (SB) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSbPoolRdataInfo:getSbPoolRdataInfo"
                        },
                        "description": "(Computed) (Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "runProbes": {
                        "type": "boolean",
                        "description": "(Computed) (Boolean) Indicates whether or not probes are run for this pool record.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 records is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "actOnProbes",
                    "backupRecords",
                    "failureThreshold",
                    "maxActive",
                    "maxServed",
                    "order",
                    "ownerName",
                    "poolDescription",
                    "rdataInfos",
                    "recordType",
                    "runProbes",
                    "status",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getSfPool:getSfPool": {
            "description": "Use this data source to get detailed information of Simple Monitor/Failover (SF) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst sfpool = pulumi.output(ultradns.getSfPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nsfpool = ultradns.get_sf_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sfpool = Ultradns.GetSfPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupSfPool(ctx, \u0026GetSfPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetSfPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sfpool = UltradnsFunctions.getSfPool(GetSfPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sfpool:\n    Fn::Invoke:\n      Function: ultradns:getSfPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSfPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A or AAAA) or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSfPool.\n",
                "properties": {
                    "backupRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSfPoolBackupRecord:getSfPoolBackupRecord"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "liveRecordDescription": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the live record.\n"
                    },
                    "monitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSfPoolMonitor:getSfPoolMonitor"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the Simple Failover field.\n"
                    },
                    "recordDatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) (String List) The list of IPv4 or IPv6 addresses.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "regionFailureSensitivity": {
                        "type": "string",
                        "description": "(Computed) (String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String) Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK` – Live record is being served.\u003c/br\u003e\n`CRITICAL` – The backup record is being served due to the monitor detecting a failure.\u003c/br\u003e\n`MANUAL` – The backup record is being served due to the user forcing the live record to be inactive.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backupRecords",
                    "liveRecordDescription",
                    "monitors",
                    "ownerName",
                    "poolDescription",
                    "recordDatas",
                    "recordType",
                    "regionFailureSensitivity",
                    "status",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getSlbPool:getSlbPool": {
            "description": "Use this data source to get detailed information of Simple Load Balancing (SLB) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst slbpool = pulumi.output(ultradns.getSlbPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nslbpool = ultradns.get_slb_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slbpool = Ultradns.GetSlbPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupSlbPool(ctx, \u0026GetSlbPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetSlbPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var slbpool = UltradnsFunctions.getSlbPool(GetSlbPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  slbpool:\n    Fn::Invoke:\n      Function: ultradns:getSlbPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSlbPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A or AAAA), or the corresponding number for the type (1 or 28).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n`AAAA (28)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSlbPool.\n",
                "properties": {
                    "allFailRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSlbPoolAllFailRecord:getSlbPoolAllFailRecord"
                        },
                        "description": "(Required) (Block Set) Nested block describing the information for the backup record. The structure of this block is described below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "monitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSlbPoolMonitor:getSlbPoolMonitor"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the information for the monitor. The structure of this block is described below.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the Simple Load Balancing (SLB) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getSlbPoolRdataInfo:getSlbPoolRdataInfo"
                        },
                        "description": "(Required) (Block Set, Max: 5) Nested block describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "regionFailureSensitivity": {
                        "type": "string",
                        "description": "(Computed) (String) Specifies the sensitivity to the number of regions that need to fail for the backup record to be made active.\n"
                    },
                    "responseMethod": {
                        "type": "string",
                        "description": "(Required) (String) The method used to select which record is returned from the primary record pool. valid values are:\u003c/br\u003e\n`PRIORITY_HUNT` – The sequence of the records listed in the primary record pool determines the priority. The first record listed is the highest priority record. Once a record starts being served, it will always be served until the probe detects a failure on this record, or, the record is set to FORCED_INACTIVE.\u003c/br\u003e\n`RANDOM` – A random record is returned from the following set of primary records.\u003c/br\u003e\n`ROUND_ROBIN` - A record is returned in (a round robin fashion) rotation, based upon the priority of the following active set of records.\n"
                    },
                    "servingPreference": {
                        "type": "string",
                        "description": "(Required) (String) It determines if records will be selected from the Primary Records pool , or, from the All Fail Record. Valid values are:\u003c/br\u003e\n`AUTO_SELECT`: Serving method switches from serving Primary Records, to All Fail Record based upon probe results, and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_PRIMARY`: Only the Primary Records are served based upon the probe results and the Forced State of the Primary Records.\u003c/br\u003e\n`SERVE_ALL_FAIL`: Only the All Fail Record will be served, ignoring the probe results and the Forced State of the Primary Records.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- Priority record(s) are being served.\u003c/br\u003e\n`WARNING` – One of the priority records is not being served due to the monitor detecting a failure, but there is still a priority record to be served.\u003c/br\u003e\n`CRITICAL` – The backup All Fail record is being served due to the monitor detecting a failure.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allFailRecords",
                    "monitors",
                    "ownerName",
                    "poolDescription",
                    "rdataInfos",
                    "recordType",
                    "regionFailureSensitivity",
                    "responseMethod",
                    "servingPreference",
                    "status",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getTcPool:getTcPool": {
            "description": "Use this data source to get detailed information of Traffic Controller (TC) pool records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst tcpool = pulumi.output(ultradns.getTcPool({\n    ownerName: \"www\",\n    recordType: \"A\",\n    zoneName: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\ntcpool = ultradns.get_tc_pool(owner_name=\"www\",\n    record_type=\"A\",\n    zone_name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tcpool = Ultradns.GetTcPool.Invoke(new()\n    {\n        OwnerName = \"www\",\n        RecordType = \"A\",\n        ZoneName = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupTcPool(ctx, \u0026GetTcPoolArgs{\n\t\t\tOwnerName:  \"www\",\n\t\t\tRecordType: \"A\",\n\t\t\tZoneName:   \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetTcPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tcpool = UltradnsFunctions.getTcPool(GetTcPoolArgs.builder()\n            .ownerName(\"www\")\n            .recordType(\"A\")\n            .zoneName(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tcpool:\n    Fn::Invoke:\n      Function: ultradns:getTcPool\n      Arguments:\n        ownerName: www\n        recordType: A\n        zoneName: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTcPool.\n",
                "properties": {
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "(String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).\u003cbr/\u003e\nBelow are the supported resource record types with the corresponding number:\u003cbr/\u003e\n`A (1)`\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ownerName",
                    "recordType",
                    "zoneName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTcPool.\n",
                "properties": {
                    "actOnProbes": {
                        "type": "boolean",
                        "description": "(Computed) (Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run.\n"
                    },
                    "backupRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getTcPoolBackupRecord:getTcPoolBackupRecord"
                        },
                        "description": "(Computed) (Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one or more A records used as backup records, or a single CNAME record. The structure of this block is described below.\n"
                    },
                    "failureThreshold": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.\u003cbr/\u003e\nFor example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxToLb": {
                        "type": "integer",
                        "description": "(Computed) (Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records.\n"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "poolDescription": {
                        "type": "string",
                        "description": "(Computed) (String) An optional description of the Traffic Controller (TC) field.\n"
                    },
                    "rdataInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getTcPoolRdataInfo:getTcPoolRdataInfo"
                        },
                        "description": "(Computed) (Block Set) List of nested blocks describing the pool records. The structure of this block is described below.\n"
                    },
                    "recordType": {
                        "type": "string"
                    },
                    "runProbes": {
                        "type": "boolean",
                        "description": "(Computed) (Boolean) Indicates whether or not probes are run for this pool record.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String)  Current status of the serving record. Valid values are:\u003c/br\u003e\n`OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 record is serving.\u003c/br\u003e\n`WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.\u003c/br\u003e\nFor example, if a pool has a Max Active of 1 and the Priority 1 records is not serving and the Priority 2 record is serving.\u003c/br\u003e\n`CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.\u003c/br\u003e\nFor example, if a pool has a Max Active of 2, and only one record is serving.\u003c/br\u003e\n`FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.\u003c/br\u003eOR\u003c/br\u003eIf the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.\u003c/br\u003e\nFor example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "(Computed) (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.\n"
                    },
                    "zoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "actOnProbes",
                    "backupRecords",
                    "failureThreshold",
                    "maxToLb",
                    "ownerName",
                    "poolDescription",
                    "rdataInfos",
                    "recordType",
                    "runProbes",
                    "status",
                    "ttl",
                    "zoneName",
                    "id"
                ]
            }
        },
        "ultradns:index/getZone:getZone": {
            "description": "Use this data source to get detailed information for your zones.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ultradns from \"@pulumi/ultradns\";\n\nconst zone = pulumi.output(ultradns.getZone({\n    name: \"example.com.\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_ultradns as ultradns\n\nzone = ultradns.get_zone(name=\"example.com.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Ultradns = Pulumi.Ultradns;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zone = Ultradns.GetZone.Invoke(new()\n    {\n        Name = \"example.com.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ultradns.LookupZone(ctx, \u0026GetZoneArgs{\n\t\t\tName: \"example.com.\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ultradns.UltradnsFunctions;\nimport com.pulumi.ultradns.inputs.GetZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zone = UltradnsFunctions.getZone(GetZoneArgs.builder()\n            .name(\"example.com.\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  zone:\n    Fn::Invoke:\n      Function: ultradns:getZone\n      Arguments:\n        name: example.com.\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "(String) Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "(Computed) (String) Name of the account.\n"
                    },
                    "dnssecStatus": {
                        "type": "string",
                        "description": "(Computed) (String) Whether or not the zone is signed with DNSSEC. Valid values are `SIGNED` or `UNSIGNED`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inherit": {
                        "type": "string",
                        "description": "(Computed) (String) Describes the inherited zone transfer values from the Account. Valid values are `ALL`, `NONE`, any combination of `IP_RANGE`, `NOTIFY_IP`, `TSIG`. Multiple values are separated with a comma.\u003cbr/\u003e\nExample: `IP_RANGE, NOTIFY_IP`\n"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "(Computed) (String) The last date and time the zone was modified, represented in ISO8601 format(`yyyy-MM-ddTHH:mmZ`).\u003cbr/\u003e\nExample: `2021-12-07T11:25Z`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notificationEmailAddress": {
                        "type": "string",
                        "description": "(Computed) (String) The Notification Email for a secondary zone.\n"
                    },
                    "notifyAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZoneNotifyAddress:getZoneNotifyAddress"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the IPv4 Addresses that are notified when updates are made to the primary zone. The structure of this block is described below.\n"
                    },
                    "originalZoneName": {
                        "type": "string",
                        "description": "(Computed) (String) The name of the zone being aliased. The existing zone must be owned by the same account as the new zone.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "(Computed) (String) Name of the user that created the zone.\n"
                    },
                    "primaryNameServer1s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZonePrimaryNameServer1:getZonePrimaryNameServer1"
                        },
                        "description": "(Computed) (Block Set) The structure of this block follows the same structure as the `name_server` block described below. It is the info of primary name server.\n"
                    },
                    "primaryNameServer2s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZonePrimaryNameServer2:getZonePrimaryNameServer2"
                        },
                        "description": "(Computed) (Block Set) The structure of this block follows the same structure as the `name_server` block described below. It is the info of first backup primary name server.\n"
                    },
                    "primaryNameServer3s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZonePrimaryNameServer3:getZonePrimaryNameServer3"
                        },
                        "description": "(Computed) (Block Set) The structure of this block follows the same structure as the `name_server` block described below. It is the info of second backup primary name server.\n"
                    },
                    "registrarInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZoneRegistrarInfo:getZoneRegistrarInfo"
                        },
                        "description": "(Computed) (Block Set) Nested block describing information about the name server configuration for this zone. The structure of this block is described below.\n"
                    },
                    "resourceRecordCount": {
                        "type": "integer",
                        "description": "(Computed) (Integer) Number of records in the zone.\n"
                    },
                    "restrictIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZoneRestrictIp:getZoneRestrictIp"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the list of IPv4 or IPv6 ranges that are allowed to transfer primary zones out using zone transfer protocol (AXFR/IXFR). The structure of this block is described below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) (String) Displays the status of the zone. Valid values are `ACTIVE`, `SUSPENDED` or `ERROR`.\n"
                    },
                    "transferStatusDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZoneTransferStatusDetail:getZoneTransferStatusDetail"
                        },
                        "description": "(Computed) (Block Set) Nested block describing the zone transfer details. The structure of this block is described below.\n"
                    },
                    "tsigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ultradns:index/getZoneTsig:getZoneTsig"
                        },
                        "description": "(Computed) (Block Set, Max: 1) Nested block describing the TSIG information for the primary zone. The structure of this block is described below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) (String) Type of zone. Valid values are `PRIMARY`, `SECONDARY` or `ALIAS`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "dnssecStatus",
                    "inherit",
                    "lastModifiedTime",
                    "name",
                    "notificationEmailAddress",
                    "notifyAddresses",
                    "originalZoneName",
                    "owner",
                    "primaryNameServer1s",
                    "primaryNameServer2s",
                    "primaryNameServer3s",
                    "registrarInfos",
                    "resourceRecordCount",
                    "restrictIps",
                    "status",
                    "transferStatusDetails",
                    "tsigs",
                    "type",
                    "id"
                ]
            }
        }
    }
}