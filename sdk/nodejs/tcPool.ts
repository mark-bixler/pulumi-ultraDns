// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this resource to manage Traffic Controller (TC) pool records in UltraDNS.
 *
 * ## Example Usage
 * ### Create TC pool record of type A (1)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const tcPool = new ultradns.TcPool("a", {
 *     actOnProbes: true,
 *     backupRecord: {
 *         failoverDelay: 1,
 *         rdata: "192.168.1.3",
 *     },
 *     failureThreshold: 2,
 *     maxToLb: 1,
 *     ownerName: "a",
 *     poolDescription: "TC Pool Resource of Type A",
 *     rdataInfos: [
 *         {
 *             failoverDelay: 2,
 *             priority: 2,
 *             rdata: "192.168.1.1",
 *             runProbes: true,
 *             state: "ACTIVE",
 *             threshold: 1,
 *             weight: 4,
 *         },
 *         {
 *             failoverDelay: 1,
 *             priority: 1,
 *             rdata: "192.168.1.2",
 *             runProbes: false,
 *             state: "NORMAL",
 *             threshold: 1,
 *         },
 *     ],
 *     recordType: "A",
 *     runProbes: true,
 *     ttl: 120,
 *     zoneName: "example.com.",
 * });
 * ```
 *
 * ## Import
 *
 * Traffic Controller (TC) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.<br/> Example `www.example.com.:example.com.:A (1)`. -> For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform
 *
 * ```sh
 *  $ pulumi import ultradns:index/tcPool:TcPool example "www.example.com.:example.com.:A (1)"
 * ```
 */
export class TcPool extends pulumi.CustomResource {
    /**
     * Get an existing TcPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TcPoolState, opts?: pulumi.CustomResourceOptions): TcPool {
        return new TcPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/tcPool:TcPool';

    /**
     * Returns true if the given object is an instance of TcPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TcPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcPool.__pulumiType;
    }

    /**
     * (Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.
     */
    public readonly actOnProbes!: pulumi.Output<boolean | undefined>;
    /**
     * (Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.
     */
    public readonly backupRecord!: pulumi.Output<outputs.TcPoolBackupRecord | undefined>;
    /**
     * (Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.<br/>
     * For example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.<br/>
     * Valid value between 0 and the number of priority records in the pool.
     */
    public readonly failureThreshold!: pulumi.Output<number | undefined>;
    /**
     * (Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.
     */
    public readonly maxToLb!: pulumi.Output<number | undefined>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    public readonly ownerName!: pulumi.Output<string>;
    /**
     * (String) An optional description of the Traffic Controller (TC) field.
     */
    public readonly poolDescription!: pulumi.Output<string | undefined>;
    /**
     * (Block Set) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    public readonly rdataInfos!: pulumi.Output<outputs.TcPoolRdataInfo[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     */
    public readonly recordType!: pulumi.Output<string>;
    /**
     * (Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.
     */
    public readonly runProbes!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) (String)  Current status of the serving record. Valid values are:</br>
     * `OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.</br>
     * For example, if a pool has a Max Active of 1 and the Priority 1 record is serving.</br>
     * `WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.</br>
     * For example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.</br>
     * `CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.</br>
     * For example, if a pool has a Max Active of 2, and only one record is serving.</br>
     * `FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.</br>OR</br>If the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.</br>
     * For example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * (String) Name of the zone.
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a TcPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TcPoolArgs | TcPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TcPoolState | undefined;
            resourceInputs["actOnProbes"] = state ? state.actOnProbes : undefined;
            resourceInputs["backupRecord"] = state ? state.backupRecord : undefined;
            resourceInputs["failureThreshold"] = state ? state.failureThreshold : undefined;
            resourceInputs["maxToLb"] = state ? state.maxToLb : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolDescription"] = state ? state.poolDescription : undefined;
            resourceInputs["rdataInfos"] = state ? state.rdataInfos : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["runProbes"] = state ? state.runProbes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as TcPoolArgs | undefined;
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.rdataInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdataInfos'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["actOnProbes"] = args ? args.actOnProbes : undefined;
            resourceInputs["backupRecord"] = args ? args.backupRecord : undefined;
            resourceInputs["failureThreshold"] = args ? args.failureThreshold : undefined;
            resourceInputs["maxToLb"] = args ? args.maxToLb : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolDescription"] = args ? args.poolDescription : undefined;
            resourceInputs["rdataInfos"] = args ? args.rdataInfos : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["runProbes"] = args ? args.runProbes : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TcPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TcPool resources.
 */
export interface TcPoolState {
    /**
     * (Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.
     */
    actOnProbes?: pulumi.Input<boolean>;
    /**
     * (Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.
     */
    backupRecord?: pulumi.Input<inputs.TcPoolBackupRecord>;
    /**
     * (Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.<br/>
     * For example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.<br/>
     * Valid value between 0 and the number of priority records in the pool.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * (Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.
     */
    maxToLb?: pulumi.Input<number>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    ownerName?: pulumi.Input<string>;
    /**
     * (String) An optional description of the Traffic Controller (TC) field.
     */
    poolDescription?: pulumi.Input<string>;
    /**
     * (Block Set) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    rdataInfos?: pulumi.Input<pulumi.Input<inputs.TcPoolRdataInfo>[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     */
    recordType?: pulumi.Input<string>;
    /**
     * (Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.
     */
    runProbes?: pulumi.Input<boolean>;
    /**
     * (Computed) (String)  Current status of the serving record. Valid values are:</br>
     * `OK`- If the number of records serving is equal to the Max Active value, and all the active records are top priority records.</br>
     * For example, if a pool has a Max Active of 1 and the Priority 1 record is serving.</br>
     * `WARNING` – If the number of records serving is equal to the Max Active value, and the active records are not top priority records.</br>
     * For example, if a pool has a Max Active of 1, and the Priority 1 record is not serving and the Priority 2 record is serving.</br>
     * `CRITICAL` – If the number of records serving is less than the Max Active value, or the All Fail record is being served.</br>
     * For example, if a pool has a Max Active of 2, and only one record is serving.</br>
     * `FAILED` - If the FailureThreshold value is 0 or null, and no records are serving, and there is no All Fail record configured.</br>OR</br>If the number of priority records not available to serve equals or exceeds the FailureThreshold’s value.</br>
     * For example, if the Failure Threshold value is 3, and there are 3 or more Priority Records that are not available to serve.
     */
    status?: pulumi.Input<string>;
    /**
     * (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
     */
    ttl?: pulumi.Input<number>;
    /**
     * (String) Name of the zone.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TcPool resource.
 */
export interface TcPoolArgs {
    /**
     * (Boolean) Indicates whether or not pool records will be enabled (true) or disabled (false) when probes are run. Default value set to true.
     */
    actOnProbes?: pulumi.Input<boolean>;
    /**
     * (Block Set, Max: 1) Nested block describing the information of the backup record for the Traffic Controller pool. The backup record is served if all other records fail. There can be one A record, or a single CNAME record. The structure of this block is described below.
     */
    backupRecord?: pulumi.Input<inputs.TcPoolBackupRecord>;
    /**
     * (Integer) The minimum number of records that must fail for a pool to be labeled 'FAILED'. If the number of failed records in the pool is greater than or equal to the 'Failure Threshold' value, the pool will be labeled FAILED.<br/>
     * For example, a pool with six priority records, one all-fail record, and the Failure Threshold value is set to four (4). If four or more priority records are not available to serve, the pool will be labeled FAILED, and the all-fail record will be served.<br/>
     * Valid value between 0 and the number of priority records in the pool.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * (Integer) Specifies the maximum number of active servers in a pool. The maximum value is the number of pool records. Default value set to 0.
     */
    maxToLb?: pulumi.Input<number>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    ownerName: pulumi.Input<string>;
    /**
     * (String) An optional description of the Traffic Controller (TC) field.
     */
    poolDescription?: pulumi.Input<string>;
    /**
     * (Block Set) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    rdataInfos: pulumi.Input<pulumi.Input<inputs.TcPoolRdataInfo>[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A), or the corresponding number for the type (1).<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     */
    recordType: pulumi.Input<string>;
    /**
     * (Boolean) Indicates whether or not the probes are run for this pool. Default value set to true.
     */
    runProbes?: pulumi.Input<boolean>;
    /**
     * (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
     */
    ttl?: pulumi.Input<number>;
    /**
     * (String) Name of the zone.
     */
    zoneName: pulumi.Input<string>;
}
