// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DirPoolArgs, DirPoolState } from "./dirPool";
export type DirPool = import("./dirPool").DirPool;
export const DirPool: typeof import("./dirPool").DirPool = null as any;

export { GetDirPoolArgs, GetDirPoolResult, GetDirPoolOutputArgs } from "./getDirPool";
export const getDirPool: typeof import("./getDirPool").getDirPool = null as any;
export const getDirPoolOutput: typeof import("./getDirPool").getDirPoolOutput = null as any;

export { GetRdPoolArgs, GetRdPoolResult, GetRdPoolOutputArgs } from "./getRdPool";
export const getRdPool: typeof import("./getRdPool").getRdPool = null as any;
export const getRdPoolOutput: typeof import("./getRdPool").getRdPoolOutput = null as any;

export { GetRecordArgs, GetRecordResult, GetRecordOutputArgs } from "./getRecord";
export const getRecord: typeof import("./getRecord").getRecord = null as any;
export const getRecordOutput: typeof import("./getRecord").getRecordOutput = null as any;

export { GetSbPoolArgs, GetSbPoolResult, GetSbPoolOutputArgs } from "./getSbPool";
export const getSbPool: typeof import("./getSbPool").getSbPool = null as any;
export const getSbPoolOutput: typeof import("./getSbPool").getSbPoolOutput = null as any;

export { GetSfPoolArgs, GetSfPoolResult, GetSfPoolOutputArgs } from "./getSfPool";
export const getSfPool: typeof import("./getSfPool").getSfPool = null as any;
export const getSfPoolOutput: typeof import("./getSfPool").getSfPoolOutput = null as any;

export { GetSlbPoolArgs, GetSlbPoolResult, GetSlbPoolOutputArgs } from "./getSlbPool";
export const getSlbPool: typeof import("./getSlbPool").getSlbPool = null as any;
export const getSlbPoolOutput: typeof import("./getSlbPool").getSlbPoolOutput = null as any;

export { GetTcPoolArgs, GetTcPoolResult, GetTcPoolOutputArgs } from "./getTcPool";
export const getTcPool: typeof import("./getTcPool").getTcPool = null as any;
export const getTcPoolOutput: typeof import("./getTcPool").getTcPoolOutput = null as any;

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;

export { RdPoolArgs, RdPoolState } from "./rdPool";
export type RdPool = import("./rdPool").RdPool;
export const RdPool: typeof import("./rdPool").RdPool = null as any;

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;

export { SbPoolArgs, SbPoolState } from "./sbPool";
export type SbPool = import("./sbPool").SbPool;
export const SbPool: typeof import("./sbPool").SbPool = null as any;

export { SfPoolArgs, SfPoolState } from "./sfPool";
export type SfPool = import("./sfPool").SfPool;
export const SfPool: typeof import("./sfPool").SfPool = null as any;

export { SlbPoolArgs, SlbPoolState } from "./slbPool";
export type SlbPool = import("./slbPool").SlbPool;
export const SlbPool: typeof import("./slbPool").SlbPool = null as any;

export { TcPoolArgs, TcPoolState } from "./tcPool";
export type TcPool = import("./tcPool").TcPool;
export const TcPool: typeof import("./tcPool").TcPool = null as any;

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;

utilities.lazyLoad(exports, ["DirPool"], () => require("./dirPool"));
utilities.lazyLoad(exports, ["getDirPool","getDirPoolOutput"], () => require("./getDirPool"));
utilities.lazyLoad(exports, ["getRdPool","getRdPoolOutput"], () => require("./getRdPool"));
utilities.lazyLoad(exports, ["getRecord","getRecordOutput"], () => require("./getRecord"));
utilities.lazyLoad(exports, ["getSbPool","getSbPoolOutput"], () => require("./getSbPool"));
utilities.lazyLoad(exports, ["getSfPool","getSfPoolOutput"], () => require("./getSfPool"));
utilities.lazyLoad(exports, ["getSlbPool","getSlbPoolOutput"], () => require("./getSlbPool"));
utilities.lazyLoad(exports, ["getTcPool","getTcPoolOutput"], () => require("./getTcPool"));
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
utilities.lazyLoad(exports, ["RdPool"], () => require("./rdPool"));
utilities.lazyLoad(exports, ["Record"], () => require("./record"));
utilities.lazyLoad(exports, ["SbPool"], () => require("./sbPool"));
utilities.lazyLoad(exports, ["SfPool"], () => require("./sfPool"));
utilities.lazyLoad(exports, ["SlbPool"], () => require("./slbPool"));
utilities.lazyLoad(exports, ["TcPool"], () => require("./tcPool"));
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ultradns:index/dirPool:DirPool":
                return new DirPool(name, <any>undefined, { urn })
            case "ultradns:index/rdPool:RdPool":
                return new RdPool(name, <any>undefined, { urn })
            case "ultradns:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "ultradns:index/sbPool:SbPool":
                return new SbPool(name, <any>undefined, { urn })
            case "ultradns:index/sfPool:SfPool":
                return new SfPool(name, <any>undefined, { urn })
            case "ultradns:index/slbPool:SlbPool":
                return new SlbPool(name, <any>undefined, { urn })
            case "ultradns:index/tcPool:TcPool":
                return new TcPool(name, <any>undefined, { urn })
            case "ultradns:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ultradns", "index/dirPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/rdPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/record", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/sbPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/sfPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/slbPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/tcPool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/zone", _module)
pulumi.runtime.registerResourcePackage("ultradns", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ultradns") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
