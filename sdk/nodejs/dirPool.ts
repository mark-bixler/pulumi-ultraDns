// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this resource to manage Directional (DIR) pool records in UltraDNS.
 *
 * ## Example Usage
 * ### Create DIR pool record of type A (1)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const dirPool = new ultradns.DirPool("a", {
 *     conflictResolve: "IP",
 *     ignoreEcs: true,
 *     noResponse: {
 *         geoCodes: ["AG"],
 *         geoGroupName: "geo_response_group",
 *         ips: [{
 *             address: "2.2.2.2",
 *         }],
 *         ipGroupName: "ip_response_group",
 *     },
 *     ownerName: "a",
 *     rdataInfos: [
 *         {
 *             allNonConfigured: true,
 *             rdata: "192.168.1.5",
 *             ttl: 800,
 *         },
 *         {
 *             geoCodes: [
 *                 "NAM",
 *                 "EUR",
 *             ],
 *             geoGroupName: "geo_group",
 *             ips: [
 *                 {
 *                     address: "200.1.1.1",
 *                 },
 *                 {
 *                     end: "200.1.1.5",
 *                     start: "200.1.1.2",
 *                 },
 *                 {
 *                     cidr: "200.20.20.0/24",
 *                 },
 *             ],
 *             ipGroupName: "ip_group",
 *             rdata: "192.168.1.2",
 *         },
 *     ],
 *     recordType: "A",
 *     zoneName: "example.com.",
 * });
 * ```
 * ### Create DIR pool record of type PTR (12)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const ptr = new ultradns.DirPool("ptr", {
 *     noResponse: {
 *         allNonConfigured: true,
 *     },
 *     ownerName: "1",
 *     rdataInfos: [{
 *         geoCodes: [
 *             "NAM",
 *             "EUR",
 *         ],
 *         geoGroupName: "geo_group",
 *         rdata: "ns1.example.com.",
 *     }],
 *     recordType: "PTR",
 *     zoneName: "example.com.",
 * });
 * ```
 * ### Create DIR pool record of type MX (15)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const mx = new ultradns.DirPool("mx", {
 *     noResponse: {
 *         allNonConfigured: true,
 *     },
 *     ownerName: "mx",
 *     rdataInfos: [{
 *         geoCodes: [
 *             "NAM",
 *             "EUR",
 *         ],
 *         geoGroupName: "geo_group",
 *         rdata: "2 example.com.",
 *     }],
 *     recordType: "MX",
 *     zoneName: "example.com.",
 * });
 * ```
 * ### Create DIR pool record of type TXT (16)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const txt = new ultradns.DirPool("txt", {
 *     noResponse: {
 *         allNonConfigured: true,
 *     },
 *     ownerName: "txt.example.com.",
 *     rdataInfos: [{
 *         geoCodes: [
 *             "NAM",
 *             "EUR",
 *         ],
 *         geoGroupName: "geo_group",
 *         rdata: "text data",
 *     }],
 *     recordType: "TXT",
 *     zoneName: "example.com.",
 * });
 * ```
 * ### Create DIR pool record of type AAAA (28)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const aaaa = new ultradns.DirPool("aaaa", {
 *     conflictResolve: "IP",
 *     ignoreEcs: true,
 *     noResponse: {
 *         geoCodes: ["AI"],
 *         geoGroupName: "geo_response_group",
 *         ips: [{
 *             address: "aaaa:bbbb:cccc:dddd:eeee:ffff:3333:5555",
 *         }],
 *         ipGroupName: "ip_response_group",
 *     },
 *     ownerName: "aaaa",
 *     poolDescription: "DIR Pool Resource of type AAAA",
 *     rdataInfos: [{
 *         geoCodes: ["EUR"],
 *         geoGroupName: "geo_group",
 *         ips: [{
 *             end: "aaaa:bbbb:cccc:dddd:eeee:ffff:1111:6666",
 *             start: "aaaa:bbbb:cccc:dddd:eeee:ffff:1111:4444",
 *         }],
 *         ipGroupName: "ip_group",
 *         rdata: "aaaa:bbbb:cccc:dddd:eeee:ffff:1111:3333",
 *     }],
 *     recordType: "AAAA",
 *     zoneName: "example.com.",
 * });
 * ```
 * ### Create DIR pool record of type SRV (33)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ultradns from "@pulumi/ultradns";
 *
 * const srv = new ultradns.DirPool("srv", {
 *     noResponse: {
 *         allNonConfigured: true,
 *     },
 *     ownerName: "srv",
 *     rdataInfos: [{
 *         geoCodes: [
 *             "NAM",
 *             "EUR",
 *         ],
 *         geoGroupName: "geo_group",
 *         rdata: "5 6 7 example.com.",
 *     }],
 *     recordType: "SRV",
 *     zoneName: "example.com.",
 * });
 * ```
 * ## Valid GEO Codes:
 *
 * | Code 	| Meaning | Equivalent ISO codes |
 * | :--- 	| :----: | :--- |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `A1`  | Anonymous Proxy | None |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `A2`	| Satellite Provider | None |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `A3`	| Unknown / Uncategorized IPs | None |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `NAM`	| North America (including Central America and the Caribbean) | `AG`,`AI`,`AN`,`AW`,`BB`,`BL`,`BM`,</br>`BQ`,`BS`,`BZ`,`CA`,`CR`,`CU`,`CW`,</br>`DM`,`DO`,`GD`,`GL`,`GP`,`GT`,`HN`,</br>`HT`,`JM`,`KN`,`KY`,`LC`,`MF`,`MQ`,</br>`MS`,`MX`,`NI`,`PA`,`PM`,`PR`,`SV`,</br>`SX`,`TC`,`TT`,`U3`,`US`,`VC`,`VG`,</br>`VI` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `SAM`	| South America | `AR`,`BO`,`BR`,`CL`,`CO`,`EC`,`FK`,</br>`GF`,`GS`,`GY`,`PE`,`PY`,`SR`,`U4`,</br>`UY`,`VE` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `EUR`	| Europe | `AD`,`AL`,`AM`,`AT`,`AX`,`AZ`,`BA`,</br>`BE`,`BG`,`BY`,`CH`,`CZ`,`DE`,`DK`,</br>`EE`,`ES`,`FI`,`FO`,`FR`,`GB`,`GE`,</br>`GG`,`GI`,`GR`,`HR`,`HU`,`IE`,`IM`,</br>`IS`,`IT`,`JE`,`LI`,`LT`,`LU`,`LV`,</br>`MC`,`MD`,`ME`,`MK`,`MT`,`NL`,`NO`,</br>`PL`,`PT`,`RO`,`RS`,`SE`,`SI`,`SJ`,</br>`SK`,`SM`,`U5`,`UA`,`VA` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `AFR`	| Africa | `AO`,`BF`,`BI`,`BJ`,`BW`,`CD`,`CF`,</br>`CG`,`CI`,`CM`,`CV`,`DJ`,`DZ`,`EG`,</br>`EH`,`ER`,`ET`,`GA`,`GH`,`GM`,`GN`,</br>`GQ`,`GW`,`KE`,`KM`,`LR`,`LS`,`LY`,</br>`MA`,`MG`,`ML`,`MR`,`MU`,`MW`,`MZ`,</br>`NA`,`NE`,`NG`,`RE`,`RW`,`SC`,`SD`,</br>`SH`,`SL`,`SN`,`SO`,`SS`,`ST`,`SZ`,</br>`TD`,`TG`,`TN`,`TZ`,`U7`,`UG`,`YT`,</br>`ZA`,`ZM`,`ZW` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `ASI`	| Asia (including Middle East and the Russian Federation) | `AE`,`AF`,`BD`,`BH`,`BN`,`BT`,`CN`,</br>`CY`,`HK`,`ID`,`IL`,`IN`,`IO`,`IQ`,</br>`IR`,`JO`,`JP`,`KG`,`KH`,`KP`,`KR`,</br>`KW`,`KZ`,`LA`,`LB`,`LK`,`MM`,`MN`,</br>`MO`,`MV`,`MY`,`NP`,`OM`,`PH`,`PK`,</br>`PS`,`QA`,`RU`,`SA`,`SG`,`SY`,`TH`,</br>`TJ`,`TL`,`TM`,`TR`,`TW`,`U6`,`U8`,</br>`UZ`,`VN`,`YE` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `OCN`	| Australia / Oceania | `AS`,`AU`,`CC`,`CK`,`CX`,`FJ`,`FM`,</br>`GU`,`HM`,`KI`,`MH`,`MP`,`NC`,`NF`,</br>`NR`,`NU`,`NZ`,`PF`,`PG`,`PN`,`PW`,</br>`SB`,`TK`,`TO`,`TV`,`U9`,`UM`,`VU`,</br>`WF`,`WS` |
 * |_________________________|__________________________________________________|__________________________________________________|
 * | `ANT`	| Antarctica | `AQ`, `TF`, `BV` |
 * |_________________________|__________________________________________________|__________________________________________________|
 *
 * ## Import
 *
 * Directional (DIR) pool records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.<br/> Example `www.example.com.:example.com.:A (1)`. -> For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type, as well as the corresponding number, as shown in the example below. Exampleterraform
 *
 * ```sh
 *  $ pulumi import ultradns:index/dirPool:DirPool example "www.example.com.:example.com.:A (1)"
 * ```
 */
export class DirPool extends pulumi.CustomResource {
    /**
     * Get an existing DirPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirPoolState, opts?: pulumi.CustomResourceOptions): DirPool {
        return new DirPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/dirPool:DirPool';

    /**
     * Returns true if the given object is an instance of DirPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirPool.__pulumiType;
    }

    /**
     * (String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.
     */
    public readonly conflictResolve!: pulumi.Output<string | undefined>;
    /**
     * (Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.</br>
     * `false`= EDNSO data will be used for IP directional routing.</br>
     * `true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.</br>
     * Default value set to false.
     */
    public readonly ignoreEcs!: pulumi.Output<boolean | undefined>;
    /**
     * (Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.
     */
    public readonly noResponse!: pulumi.Output<outputs.DirPoolNoResponse | undefined>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    public readonly ownerName!: pulumi.Output<string>;
    /**
     * (String) Allows for an additional description of the Directional (DIR) pool.
     */
    public readonly poolDescription!: pulumi.Output<string | undefined>;
    /**
     * (Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    public readonly rdataInfos!: pulumi.Output<outputs.DirPoolRdataInfo[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     * `PTR (12)`
     * `MX (15)`
     * `TXT (16)`
     * `AAAA (28)`
     * `SRV (33)`
     */
    public readonly recordType!: pulumi.Output<string>;
    /**
     * (Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.
     */
    public /*out*/ readonly ttl!: pulumi.Output<number>;
    /**
     * (String) Name of the zone.
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a DirPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirPoolArgs | DirPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirPoolState | undefined;
            resourceInputs["conflictResolve"] = state ? state.conflictResolve : undefined;
            resourceInputs["ignoreEcs"] = state ? state.ignoreEcs : undefined;
            resourceInputs["noResponse"] = state ? state.noResponse : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolDescription"] = state ? state.poolDescription : undefined;
            resourceInputs["rdataInfos"] = state ? state.rdataInfos : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as DirPoolArgs | undefined;
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.rdataInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdataInfos'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["conflictResolve"] = args ? args.conflictResolve : undefined;
            resourceInputs["ignoreEcs"] = args ? args.ignoreEcs : undefined;
            resourceInputs["noResponse"] = args ? args.noResponse : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolDescription"] = args ? args.poolDescription : undefined;
            resourceInputs["rdataInfos"] = args ? args.rdataInfos : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["ttl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DirPool resources.
 */
export interface DirPoolState {
    /**
     * (String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.
     */
    conflictResolve?: pulumi.Input<string>;
    /**
     * (Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.</br>
     * `false`= EDNSO data will be used for IP directional routing.</br>
     * `true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.</br>
     * Default value set to false.
     */
    ignoreEcs?: pulumi.Input<boolean>;
    /**
     * (Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.
     */
    noResponse?: pulumi.Input<inputs.DirPoolNoResponse>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    ownerName?: pulumi.Input<string>;
    /**
     * (String) Allows for an additional description of the Directional (DIR) pool.
     */
    poolDescription?: pulumi.Input<string>;
    /**
     * (Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    rdataInfos?: pulumi.Input<pulumi.Input<inputs.DirPoolRdataInfo>[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     * `PTR (12)`
     * `MX (15)`
     * `TXT (16)`
     * `AAAA (28)`
     * `SRV (33)`
     */
    recordType?: pulumi.Input<string>;
    /**
     * (Integer) The time to live (in seconds) for the corresponding record in rdata. Must be a value between 0 and 2147483647, inclusive.
     */
    ttl?: pulumi.Input<number>;
    /**
     * (String) Name of the zone.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DirPool resource.
 */
export interface DirPoolArgs {
    /**
     * (String) When there is a conflict between a matching GeoIP group and a matching SourceIP group, this will determine which should take precedence. This only applies to a mixed pool (contains both GeoIP and SourceIP data). Valid values are `GEO` and `IP`. Default value set to `GEO`.
     */
    conflictResolve?: pulumi.Input<string>;
    /**
     * (Boolean) Whether to ignore the EDNSO (which is an extended label type allowing for greater DNS messaging size) Client Subnet data when available in the DNS request.</br>
     * `false`= EDNSO data will be used for IP directional routing.</br>
     * `true` = EDNSO data will not be used and IP directional routing decisions will always use the IP address of the recursive server.</br>
     * Default value set to false.
     */
    ignoreEcs?: pulumi.Input<boolean>;
    /**
     * (Block Set, Max: 1) Nested block describing certain geographical territories and IP addresses that will not get a response if they try to access the directional pool. The structure of this block is described below.
     */
    noResponse?: pulumi.Input<inputs.DirPoolNoResponse>;
    /**
     * (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
     */
    ownerName: pulumi.Input<string>;
    /**
     * (String) Allows for an additional description of the Directional (DIR) pool.
     */
    poolDescription?: pulumi.Input<string>;
    /**
     * (Block Set, Min: 1) List of nested blocks describing the pool records. The structure of this block is described below.
     */
    rdataInfos: pulumi.Input<pulumi.Input<inputs.DirPoolRdataInfo>[]>;
    /**
     * (String) Must be formatted as a well-known resource record type (A, AAAA, TXT, etc.), or the corresponding number for the type; between 1 and 33.<br/>
     * Below are the supported resource record types with the corresponding number:<br/>
     * `A (1)`
     * `PTR (12)`
     * `MX (15)`
     * `TXT (16)`
     * `AAAA (28)`
     * `SRV (33)`
     */
    recordType: pulumi.Input<string>;
    /**
     * (String) Name of the zone.
     */
    zoneName: pulumi.Input<string>;
}
