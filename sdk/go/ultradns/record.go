// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ultradns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to manage standard DNS records in UltraDNS
//
// ## Example Usage
// ### Create DNS record of type A (1)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "record", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("a"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("192.168.1.1"),
//				},
//				RecordType: pulumi.String("1"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type NS (2)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "ns", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("example.com."),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("ns11.sample.com."),
//					pulumi.String("ns12.sample.com."),
//				},
//				RecordType: pulumi.String("NS"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type CNAME (5)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "cname", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("cname"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("host.sample.com."),
//				},
//				RecordType: pulumi.String("CNAME"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type PTR (12)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "ptr", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("1"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("ns1.example.com."),
//				},
//				RecordType: pulumi.String("12"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("70.154.156.in-addr.arpa."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type MX (15)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "mx", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("mx"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("2 example.com."),
//				},
//				RecordType: pulumi.String("15"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type TXT (16)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "txt", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("txt"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("text data"),
//				},
//				RecordType: pulumi.String("TXT"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type AAAA (28)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "aaaa", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("aaaa"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("2001:db8:85a3:0:0:8a2e:370:7334"),
//				},
//				RecordType: pulumi.String("AAAA"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type SRV (33)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "srv", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("srv"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("5 6 7 example.com."),
//				},
//				RecordType: pulumi.String("33"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type SSHFP (44)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "sshfp", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("sshfp"),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("1 2 54B5E539EAF593AEA410F80737530B71CCDE8B6C3D241184A1372E98BC7EDB37"),
//				},
//				RecordType: pulumi.String("SSHFP"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create DNS record of type APEXALIAS (65282)
//
// ```go
// package main
//
// import (
//
//	"github.com/mark-bixler/pulumi-ultradns/sdk/go/ultradns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ultradns.NewRecord(ctx, "apex", &ultradns.RecordArgs{
//				OwnerName: pulumi.String("example.com."),
//				RecordDatas: pulumi.StringArray{
//					pulumi.String("sample.com."),
//				},
//				RecordType: pulumi.String("APEXALIAS"),
//				Ttl:        pulumi.Int(120),
//				ZoneName:   pulumi.String("example.com."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Records can be imported by combining their `owner_name`, `zone_name`, and `record_type`, separated by a colon.<br/> Example `www.example.com.:example.com.:A (1)`. -> For import, the `owner_name` and `zone_name` must be a FQDN, and `record_type` should have the type as well as the corresponding number as shown in the example below. Example
//
// ```sh
//
//	$ pulumi import ultradns:index/record:Record example "www.example.com.:example.com.:A (1)"
//
// ```
type Record struct {
	pulumi.CustomResourceState

	// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
	OwnerName pulumi.StringOutput `pulumi:"ownerName"`
	// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
	// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
	// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
	RecordDatas pulumi.StringArrayOutput `pulumi:"recordDatas"`
	// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
	// Below are the supported resource record types with the corresponding number:<br/>
	// `A (1)`
	// `NS (2)`
	// `CNAME (5)`
	// `PTR (12)`
	// `MX (15)`
	// `TXT (16)`
	// `AAAA (28)`
	// `SRV (33)`
	// `SSHFP (44)`
	// `APEXALIAS (65282)`
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// (String) Name of the zone.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnerName == nil {
		return nil, errors.New("invalid value for required argument 'OwnerName'")
	}
	if args.RecordDatas == nil {
		return nil, errors.New("invalid value for required argument 'RecordDatas'")
	}
	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("ultradns:index/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("ultradns:index/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
	OwnerName *string `pulumi:"ownerName"`
	// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
	// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
	// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
	RecordDatas []string `pulumi:"recordDatas"`
	// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
	// Below are the supported resource record types with the corresponding number:<br/>
	// `A (1)`
	// `NS (2)`
	// `CNAME (5)`
	// `PTR (12)`
	// `MX (15)`
	// `TXT (16)`
	// `AAAA (28)`
	// `SRV (33)`
	// `SSHFP (44)`
	// `APEXALIAS (65282)`
	RecordType *string `pulumi:"recordType"`
	// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
	Ttl *int `pulumi:"ttl"`
	// (String) Name of the zone.
	ZoneName *string `pulumi:"zoneName"`
}

type RecordState struct {
	// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
	OwnerName pulumi.StringPtrInput
	// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
	// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
	// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
	RecordDatas pulumi.StringArrayInput
	// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
	// Below are the supported resource record types with the corresponding number:<br/>
	// `A (1)`
	// `NS (2)`
	// `CNAME (5)`
	// `PTR (12)`
	// `MX (15)`
	// `TXT (16)`
	// `AAAA (28)`
	// `SRV (33)`
	// `SSHFP (44)`
	// `APEXALIAS (65282)`
	RecordType pulumi.StringPtrInput
	// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
	Ttl pulumi.IntPtrInput
	// (String) Name of the zone.
	ZoneName pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
	OwnerName string `pulumi:"ownerName"`
	// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
	// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
	// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
	RecordDatas []string `pulumi:"recordDatas"`
	// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
	// Below are the supported resource record types with the corresponding number:<br/>
	// `A (1)`
	// `NS (2)`
	// `CNAME (5)`
	// `PTR (12)`
	// `MX (15)`
	// `TXT (16)`
	// `AAAA (28)`
	// `SRV (33)`
	// `SSHFP (44)`
	// `APEXALIAS (65282)`
	RecordType string `pulumi:"recordType"`
	// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
	Ttl *int `pulumi:"ttl"`
	// (String) Name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
	OwnerName pulumi.StringInput
	// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
	// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
	// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
	RecordDatas pulumi.StringArrayInput
	// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
	// Below are the supported resource record types with the corresponding number:<br/>
	// `A (1)`
	// `NS (2)`
	// `CNAME (5)`
	// `PTR (12)`
	// `MX (15)`
	// `TXT (16)`
	// `AAAA (28)`
	// `SRV (33)`
	// `SSHFP (44)`
	// `APEXALIAS (65282)`
	RecordType pulumi.StringInput
	// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
	Ttl pulumi.IntPtrInput
	// (String) Name of the zone.
	ZoneName pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// (String) The domain name of the owner of the RRSet. Can be either a fully qualified domain name (FQDN) or a relative domain name. If provided as a FQDN, it must be contained within the zone name's FQDN.
func (o RecordOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.OwnerName }).(pulumi.StringOutput)
}

// (String List) The data for the record displayed as the BIND presentation format for the specified RRTYPE.<br/>
// Example : For a SRV record, the format of data is ["priority weight port target"] (["2 2 523 example.com."])<br/>
// Additionally for MX, CNAME, and PTR record types, the data value must be a FQDN, as it cannot be relative to the zone name.<br/>
func (o RecordOutput) RecordDatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Record) pulumi.StringArrayOutput { return v.RecordDatas }).(pulumi.StringArrayOutput)
}

// (String) Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) or the corresponding number for the type; between 1 and 65535.<br/>
// Below are the supported resource record types with the corresponding number:<br/>
// `A (1)`
// `NS (2)`
// `CNAME (5)`
// `PTR (12)`
// `MX (15)`
// `TXT (16)`
// `AAAA (28)`
// `SRV (33)`
// `SSHFP (44)`
// `APEXALIAS (65282)`
func (o RecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordType }).(pulumi.StringOutput)
}

// (Integer) The time to live (in seconds) for the record. Must be a value between 0 and 2147483647, inclusive.
func (o RecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// (String) Name of the zone.
func (o RecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
